challenges.txt 0.0.0                 UTF-8                       dh:2018-04-12
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

                          MISER THEORETICAL CONCEPTION
                          ============================

                     CHALLENGES IN MISER SYSTEM DEVELOPMENT
                     --------------------------------------

         <https://github.com/orcmid/miser/blob/master/challenges.txt>

[SYNOPSIS: TBD]

[CONTENT: TBD]

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                        Copyright 2018 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

TODO

 * 1. The first challenge is the demonstration of universality
 * 1.1 is demonstration that the <ob> is complete and the obs are
       denumerably infinite, so they are usable as arithmetic, Goedel
       numberings, whatever.
 * 1.2 one demonstration is that the context-free grammar for canonical
       obs is solvable and that the obs are finite and distinguished.
 * 1.3 the completeness of ob.a, ob.b, ob.c, in FOL= as primitive
       operations in expressing computable functions on obs is demonstrable
 * 1.4 then it is asserted that the computable Of are all available as
       computations using obap.ap(f,x).

 * 2. The additional establishment is the use of oMiser and oFrugal
      operations to demonstrate
 * 2.1 Combinatory Arithmetic in all its glory
 * 2.2 Computational representation of the lambda-calculus
 * 2.3 Computational representation of obap.ap itself (without cheating)
 * 2.4 Computational representation of arbitrary single-tape Turing Machines,
       including those asserted to be Universal
 * 2.5 Demonstration of the recursive functions, if necessary
 * 2.6 Accounting for Backus FP/FFP and the primitives

 * 3. Another challenge is with regard to acceleration including native
      operations behind scripts, and other forms of acceleration.

 * 4. The first kind of reasoning to consider is propositions on ob
      itself and what sort of deduction is available.

 * 5. The second kind of reasoning is with regard to representations and
      deductions about those and the fidelity of interpretation

 * 6. How one reasons about accelerators is mysterious because they are
      somewhat different with respect to interpretation, and interpretation
      of what.

 * 7. Security challenges including threat models to oMiser implementations
      and also on the provenance and integrity of shared scripts and
      acceleration schemes.

 * 8. Data-type representation via capsules and semblances.  This might get
      to denotational semantics and other matters.

 * 9. Reasoning about data-type representations.

 * 10. Reasoning about accelerations behind data types.

 * 11. Reasoning about optimization with respect to type restriction and
       casting across interfaces.  Open-box rewriting.

 * 12. Safe embedding of oMiser operation within interactive structures
       and protocols.

 * Find other TODOs of this nature and transpose them to this file.

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 0.0.0 2018-04-12-12:12 Create placeholder, with starter TODOs.

                         *** end of challenges.txt ***
