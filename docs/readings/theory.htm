<html>

<head>
<title>Readings: Theory of Computation</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head>

<body bgcolor="#FFFFFF" link="#0000FF" vlink="#800080" alink="#FF0000" text="#000080">

<font face="Arial, Microsoft Sans Serif, Helvetica, Geneva, Swiss, Sans Serif">
<table border="0" width="100%" height="3">
  <tr>
    
    <td width="12%" height="6">

<!--webbot bot="Include"
      U-Include="../construction/templates/00/c000005b.htm" TAG="BODY" startspan -->
<a href="http://miser-theory.info" target="_top"><img border="0" src="../images/misertheory-logo.gif" alt="The Miser Project" width="105" height="72"></a>
<!-- Included from miser /construction/c000005a.htm of 2004-05-30-21:07 -0700 -->
<!--webbot bot="Include" endspan i-checksum="1547" --></td>
    
    <td width="74%" height="6">
      <p align="center"><strong><font color="#990033">Miser Project Readings<br>
		<i><font size="5">Theory of Computation</font></i></font></strong></p>
    </td>
    
    <td width="13%" height="6">
      <p align="right"><b><code><a href="../" target="_top">miser</a>&gt;<a href="./" target="_top">readings</a>&gt;</code></b></p>
      <p align="right"><b><code><a target="_top" href="theory.htm">theory.htm</a>&gt;</code></b><br>
      <small><small><a href="#v0.01">0.01</a> 
		<!--webbot bot="Timestamp" S-Type="REGENERATED" S-Format="%Y-%m-%d %H:%M" startspan -->2023-08-15 10:13<!--webbot bot="Timestamp" endspan i-checksum="25317" --></small>
      </small></p>
      </td>
    
  </tr>
</table>
</font>

<hr color="#990033">

<blockquote>
  <blockquote>
    <dl>
      
        <dt><b><i>see also</i>:&nbsp;</b></dt>
        <dd><b>Readings in <a href="http://orcmid.com/readings/logic.htm"> Logic</a> 
		[<a href="http://orcmid.com/readings/">Orcmid&#39;s Lair</a>]<br>
          Readings in <a href="http://orcmid.com/readings/math.htm">Mathematics
          </a>&nbsp;[<a href="http://orcmid.com/readings/">Orcmid&#39;s Lair</a>]<a href="http://orcmid.com/readings/math.htm"><br>
          </a>Readings in <a href="http://orcmid.com/readings/philosophy.htm">
		Philosophy</a>&nbsp; [<a href="http://orcmid.com/readings/">Orcmid&#39;s 
		Lair</a>]<br>
		Readings in <a href="funprog.htm">Functional Programming</a></b></dd>
   
        <dt>&nbsp;</dt>
   
    </dl>
     </blockquote>
</blockquote>

<dl>
 
    <dl>
      <dt><a name="Barendregt1981">[Barendregt1981]</a> <a name="[Barengregt81]"></a></dt>
      <dd>Barendregt, Hendrik Pieter. <i>The Lambda Calculus: Its Syntax and 
		Semantics</i>. North-Holland (Amsterdam, 1981). ISBN 0-444-85490-8.&nbsp; 
		Studies in Logic and the Foundations of Mathematics, vol. 103.<font size="-1"><br>
        &nbsp;&nbsp;&nbsp;&nbsp; This is one of my fundamental sources on the 
		lambda calculus.&nbsp; I want to pay particular attention to combinatory 
		logic (CL) and combinatory algebra (CA).&nbsp; My <a href="R000700.htm">
		notes on this book</a> focus on that.<br>
        &nbsp;&nbsp; Content<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>Preface</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Part I. <i> Towards the Theory</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. Introduction<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. Conversion<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3. Reduction<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4. Theories<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5. Models<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Part II. <i> Conversion</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6. Classical 
		Lambda Calculus<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7. The Theory of 
		Combinators<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8. Classical 
		Lambda Calculus (continued)<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9. The&nbsp;λ<i>I</i>-Calculus<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10. Böhm Trees<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Part III. <i>Reduction</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11. Fundamental 
		Theorems<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 12. Strongly 
		Equivalent Reductions<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 13. Reduction 
		Strategies<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 14. Labelled 
		Reduction<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 15. Other Notions 
		of Reduction<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Part IV. <i>Theories</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16. Sensible 
		Theories<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 17. Other Lambda 
		Theories<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Part V. <i>Models</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 18. Construction 
		of Models<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 19. Local 
		Structure of Models<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20. Global 
		Structure of Models<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 21. Combinatory 
		Groups<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>Appendices</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Appendix A. Typed 
		Lambda Calculus<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Appendix B. 
		Illative Combinatory Logic<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Appendix C. 
		Variables<br>
        &nbsp;&nbsp;&nbsp;<i>&nbsp; References<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Index of Names<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Index of Definitions<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Index of Symbols<br>
        </i>&nbsp;&nbsp;&nbsp;</font></dd>
      <dt><a name="Chaitin1998">[Chaitin1998]</a> <a name="[Chaitin98]"></a></dt>
      <dd>Chaitin, Gregory J.&nbsp; <i>The Limits of Mathematics: A Course on 
		Information Theory and the Limits of Formal Reasoning.</i>&nbsp; 
		Springer-Verglag Singapore (Singapore: 1998).&nbsp; ISBN 981-3083-59-X.<font size="-1"><br>
        &nbsp;&nbsp; Contents<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>Foreword by Cristian Calude<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Preface</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Randomness in arithmetic and the decline and 
		fall of reductionism in pure mathematics [1993]<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Elegant LISP programs [1996]<br>
        &nbsp;&nbsp;&nbsp;&nbsp; An invitation to algorithmic information theory 
		[1997]<br>
        &nbsp;&nbsp;&nbsp;&nbsp; The limits of mathematics [1996]<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Appendix: LISP interpreter in Mathematica<br>
        &nbsp;&nbsp;&nbsp;</font></dd>
      <dt><a name="Chaitin1999">[Chaitin1999]</a> <a name="Chaitin1999]"></a></dt>
      <dd>Chaitin, Gregory J.&nbsp; <i>The Unknowable</i>.&nbsp; Springer-Verlag 
		Singapore (Singapore: 1999).&nbsp; ISBN 981-4021-72-5 (hardcover).&nbsp;&nbsp;<font size="-1"><br>
        &nbsp;&nbsp;&nbsp;&nbsp; HTML version on-line at <a href="http://www.umcs.maine.edu/~chaitin/unknowable" target="_top">
		http://www.umcs.maine.edu/~chaitin/unknowable</a>
        and <a href="http://www.cs.auckland.ac.nz/CDMTCS/chaitin/unknowable" target="_top">
		http://www.cs.auckland.ac.nz/CDMTCS/chaitin/unknowable</a>.<br>
        &nbsp;&nbsp;&nbsp;&nbsp; &quot;... The essence of this book is words, 
		explaining mathematical ideas, but readers who feel so inclined can 
		follow me all the way to LISP programs that pretty much show Gödel&#39;s, 
		Turing&#39;s and my proofs working on the computer.&nbsp; And if you want to 
		play with this software, you can download it from my web site.<br>
        &nbsp;&nbsp;&nbsp;&nbsp; &quot;This book is also a &#39;prequel&#39; to my Springer 
		book <i><a href="#Chaitin1998">The Limits of Mathematics</a></i>.&nbsp; 
		It&#39;s an easier introduction to my ideas, and uses the same version of 
		LISP that I use in <i>The Limits of Mathematics</i>.&nbsp; I hope it&#39;ll 
		be a stepping stone for those for whom <i>The Limits of Mathematics</i>
        is too intimidating.&quot;&nbsp; From the Preface, pp. v-vi.<br>
        &nbsp;&nbsp; Contents<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>Preface</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; I. A Hundred Years of Controversy Regarding the 
		Foundations of Mathematics<br>
        &nbsp;&nbsp;&nbsp;&nbsp; II. LISP: A Formalism for Expressing 
		Mathematical Algorithms<br>
        &nbsp;&nbsp;&nbsp;&nbsp; III. Gödel&#39;s Proof of His Incompleteness 
		Theorem<br>
        &nbsp;&nbsp;&nbsp;&nbsp; IV. Turing&#39;s Proof of the Unsolvability of the 
		Halting Problem<br>
        &nbsp;&nbsp;&nbsp;&nbsp; V. My Proof that You Can&#39;t Show that a LISP 
		Program is Elegant<br>
        &nbsp;&nbsp;&nbsp;&nbsp; VI.&nbsp; Information &amp; Randomness: A Survey of 
		Algorithmic Information Theory<br>
        &nbsp;&nbsp;&nbsp;&nbsp; VII. Mathematics in the Third Millennium?<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>Bibliography<br>
        &nbsp;&nbsp;&nbsp;</i></font></dd>
      <dt>[<a name="Church1936">Church1936</a>]</dt>
      <dd>Church, Alonzo.&nbsp; An Unsolvable Problem of Elementary Number 
		Theory.&nbsp; <i>American Journal of Mathematics <b>58</b></i> (1936), 
		345-363.&nbsp; Reprinted in pp. 88-107 of [<a href="http://orcmid.com/readings/logic.htm#[Davis1965]">Davis1965</a>]<font size="-1"><br>
        &nbsp;&nbsp;&nbsp;&nbsp; This is the paper in which Church makes the 
		assertion since known as Church&#39;s Thesis (and lately, the Church-Turing 
		Thesis).&nbsp; The <a href="http://orcmid.com/readings/logic.htm#[Church1936]">
		annotated citation</a> is now carried in <a href="http://orcmid.com/readings/logic.htm">
		Readings in Logic</a>.&nbsp; -- dh:2002-10-10<br>
        &nbsp;&nbsp;&nbsp;&nbsp;</font></dd>
      <dt>
		<a name="Davis1965" href="http://orcmid.com/readings/logic.htm#[Davis1965]">
		[Davis1965]</a> <a name="[Davis65]"></a></dt>
      <dd>Davis, Martin (ed.). <i>The Undecidable: Basic Papers on Undecidable 
		Propositions, Unsolvable Problems and Computable Functions</i>. Raven 
		Press (New York: 1965). ISBN 0-911216-01-4.&nbsp;<font size="-1"><br>
        &nbsp;&nbsp;&nbsp;&nbsp; A collection of fundamental papers by Gödel, 
		Church, Post, etc.&nbsp; The papers that have direct bearing on the 
		Miser Project are cited individually in one of the appropriate annotated 
		bibliographies.<br>
        &nbsp;&nbsp;&nbsp;&nbsp; As I have continued to explore mathematical 
		logic as a context for computation theory and the Miser Project, I am 
		now inclined to classify most of these papers as strongly centered in 
		mathematical logic and as less specific to computation, even the seminal 
		work of Turing.&nbsp; This book&#39;s annotated citation is now carried 
		under <a href="http://orcmid.com/readings/logic.htm">Readings in Logic</a>. 
		-- dh:2002-07-26&nbsp;<br>
        &nbsp;&nbsp;&nbsp;</font></dd>
      <dt><a name="Davis1982">[Davis1982]</a> <a name="[Davis82]"></a></dt>
      <dd> Davis, Martin. <i> Computability and Unsolvability.</i>  <a href="http://www.doverpublications.com" target="_top"> 
		Dover</a> (New York: 1958, 1973, 1982). ISBN 0-486-61471-9 pbk.<font size="-1"><br>
        &nbsp;&nbsp;&nbsp;&nbsp; A précis is available <a href="http://orcmid.com/writings/W000800.htm">
		here</a>.<br>
        &nbsp;&nbsp;&nbsp;&nbsp; This is a primary reference in the theory of 
		computation.&nbsp; Although it does not address Church&#39;s Thesis and 
		effective computability, it is widely used for its mapping of the 
		foundation of computation theory.&nbsp; In my <a href="R000800.htm">
		readings and notes</a>, I want to make sure that my updated formulation, 
		centered on combinatory logic and combinatory algebra, is appropriately 
		tied to this foundation and <a href="#Davis1965">other fundamental works</a> 
		in this area. -- dh:2000-08-09<br>
        &nbsp;&nbsp; Content<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>Preface to the Dover Edition</i> [1982]<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>Preface to the First Edition<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Glossary of Special Symbols</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Introduction<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Part 1: <i>The General Theory of Computability</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1. Computable 
		Functions<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2. Operations on 
		Computable Functions<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3. Recursive 
		Functions<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4. Turing 
		Machines Self-Applied<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5. Unsolvable 
		Decision Problems<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Part 2: <i>Applications of the General Theory</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6. Combinatorial 
		Problems<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7. Diophantine 
		Equations<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8. Mathematical 
		Logic<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Part 3: <i>Further Development of the General 
		Theory</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9. The Kleene 
		Hierarchy<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10. Computable 
		Functions<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11. The 
		Classification of Unsolvable Decision Problems<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Appendix 1: Some Results from the Elementary 
		Theory of Numbers<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Appendix 2. Hilbert&#39;s Tenth Problem is 
		Unsolvable<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>References<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Index<br>
        </i>&nbsp;&nbsp;&nbsp;</font></dd>
      <dt>[<a name="Garey1979">Garey1979</a>] <a name="[Garey79]"></a></dt>
      <dd>Garey, Michael R., Johnson, David S.&nbsp; <i>Computers and 
		Intractability: A Guide to the Theory of NP-Completeness</i>.&nbsp; W. 
		H. Freeman (New York: 1979).&nbsp; ISBN 0-7167-1045-5 pbk.<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <font size="-1">Way off-topic: I found this 
		book on in the local public library on the &quot;any book for 10¢&quot; cart of 
		donated books.&nbsp; It had me recall that I donated my 3-volume bound 
		set of <i>Principia Mathematica</i> to the Los Altos public library in 
		1999 and I wonder if anyone bought it, maybe for as much as 50¢ per 
		volume.&nbsp;&nbsp; <i>dh</i>: 2001-02-07.<br>
        &nbsp;&nbsp; Content<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>Preface</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; 1. Computers, Complexity, and Intractability<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 2. The Theory of NP-Completeness<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 3. Proving NP-Completeness Results<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 4. Using NP-Completeness to Analyze Problems<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 5. NP-Hardness<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 6. Coping with NP-Complete Problems<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 7. Beyond NP-Completeness<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>Appendix A</i>: A List of NP-Complete 
		Problems<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A.1 Graph Theory<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A.2 Network 
		Design<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A.3 Sets and 
		Partitions<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A.4 Storage and 
		Retrieval<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A.5 Sequencing 
		and Scheduling<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A.6 Mathematical 
		Programming<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A.7 Algebra and 
		Number Theory<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A.8 Games and 
		Puzzles<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A.9 Logic<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A.10 Automata and 
		Language Theory<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A.11 Program 
		Optimization<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A.12 
		Miscellaneous<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A.13 Open 
		Problems<br>
        &nbsp;&nbsp;&nbsp;&nbsp;<i> Symbol Index<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Reference and Author Index<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Subject Index<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Update for the Second Printing</i> [April, 
		1980]<br>
        </font>&nbsp;&nbsp;&nbsp;</dd>
      <dt>[<a name="Hopcroft2001">Hopcroft2001</a>]</dt>
      <dd>Hopcroft, John E., Motwani, Rajeev., Ullman, John D.&nbsp; <i>
		Introduction to Automata Theory, Languages, and Computation</i>.&nbsp; 
		ed.2.&nbsp; Addison-Wesley (Boston, MA: 2001).&nbsp; ISBN 0-201-44124-1.<small><br>
        </small><small>&nbsp;&nbsp;&nbsp;&nbsp; 2003-02-10: I was possessed the 
		day I packed this book home from the University Bookstore.&nbsp; It was 
		all Sipser and Vaughn Pratt&#39;s fault.&nbsp; Beside liking the look and 
		the approach of this book, I am also tracing how recursively-enumerable 
		became Turing recognizable and recursive became Turing decidable.&nbsp; 
		But even more fun is the index entry here: &quot;Algorithm, see Recursive 
		language.&quot;&nbsp; Oh.&nbsp; My.&nbsp; Goodness.&nbsp; Me.<br>
        &nbsp;&nbsp; Content<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Preface<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 1. Automata: The Methods and the Madness<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 2. Finite Automata<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 3. Regular Expressions and Languages<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 4. Properties of Regular Languages<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 5. Context-Free Grammars and Languages<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 6. Pushdown Automata<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 7. Properties of Context-Free Languages<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 8. Introduction to Turing Machines<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 9. Undecidability<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 10. Intractable Problems<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 11. Additional Classes of Problems<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Index<br>
        &nbsp;&nbsp;&nbsp;</small></dd>
      <dt>[<a name="Johnson1979">Johnson1979</a>] <a name="[Johnson79]"></a></dt>
      <dd>Garey, Michael R., Johnson, David S.&nbsp; <i>Computers and 
		Intractability: A Guide to the Theory of NP-Completeness</i>.&nbsp; W. 
		H. Freeman (New York: 1979).&nbsp; ISBN 0-7167-1045-5 pbk.&nbsp; See [<a href="#Garey1979">Garey1979</a>]<font size="-1"><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This considerate style of having a citation for every author of a 
		work is practiced in this book.&nbsp; The moment I saw it, I realized I 
		wanted to apply it also.&nbsp; I haven&#39;t gone back over other books yet, 
		although I shall, as I continue working on my readings and notes.&nbsp; <i>
		dh</i>: 2001-02-07.<br>
        &nbsp;&nbsp;&nbsp;</font></dd>
      <dt><a name="Lewis1981">[Lewis1981]</a> <a name="[Lewis81]"></a></dt>
      <dd> Lewis, Harry R., Papadimitriou, Christos H. <i> Elements of the 
		Theory of Computation</i>. Prentice-Hall (Englewood Cliffs, NJ: 1981). 
		ISBN 0-13-273417-6.<font size="-1"><br>
        &nbsp;&nbsp;&nbsp;&nbsp; This is an undergraduate introductory text on 
		the theory of computation.&nbsp;<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 2000-07-18: I am looking for notations and 
		references and these chapters are fruitful for the Miser Project: 1. 
		Sets, Relations, and Languages. 3. Context-Free Languages (but minimally 
		- just for presenting a context-free grammar as a demonstration that a 
		language is recursive and solvable). 5. Church&#39;s Thesis, again, not 
		deeply but enough to appeal to the connection between recursive 
		functions, Turing-computability, etc. 6. Uncomputability, for making 
		sure I keep the language straight, 7. The Propositional Calculus 
		(maybe), and 8. The Predicate Calculus for connection to inference 
		systems and such.&nbsp;<br>
        &nbsp;&nbsp;&nbsp;&nbsp; The material on logic is for later, I think. I 
		want to use simpler presentations for this, but I want to be consistent 
		with this kind of more-abstracted treatment.<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 2000-09-12: All right, this is the second time 
		I have checked this book out of the local public library, renewed it 
		once, and kept it overdue without looking at it.&nbsp; Today I looked 
		through it more and I will do what I have done with [<a href="#Davis1982">Davis1982</a>]: 
		Order my own copy.&nbsp; The table of contents says it all:<br>
        &nbsp;&nbsp; 1. Sets, Relations and Languages<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.1 &quot;If-Then&quot; and its Relatives 
		[big breakthrough for computational logic! -- dh:]<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.2 Sets<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.3 Relations and Functions<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.4 Special Types of Binary 
		Relations<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.5 Closures<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.6 Finite and Infinite Sets<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.7 Three Fundamental Proof 
		Techniques<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.8 Alphabets and Languages<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.9 Finite Representation of 
		Languages<br>
        &nbsp;&nbsp; 2. Finite Automata<br>
        &nbsp;&nbsp; 3. Context-Free Languages<br>
        &nbsp;&nbsp; 4. Turing Machines<br>
        &nbsp;&nbsp; 5. Church&#39;s Thesis<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.1 Church&#39;s Thesis<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.2 Grammars<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.3 The Primitive Recursive 
		Functions<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.4 Gödelization<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.5 The µ-Recursive Functions<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.6 Turing-Computability of the 
		µ-Recursive Functions<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.7 Universal Turing Machines<br>
        &nbsp;&nbsp; 6. Uncomputability<br>
        &nbsp;&nbsp; 7. Computational Complexity<br>
        &nbsp;&nbsp; 8. The Propositional Calculus<br>
        &nbsp;&nbsp; 9. The Predicate Calculus<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 2000-09-13: Well, a good plan that is 
		impossible to execute: This book is now in its second edition, and the 
		second edition is consistently panned by readers, especially in 
		comparison to the first edition which is held in higher repute by people 
		willing to confront the mathematics.&nbsp; So I may just have to keep 
		checking this one out of the library when I want to verify what it 
		offers against the other sources I have for these topics.&nbsp; I do 
		like the outline of the original, so I will stay with it.&nbsp; (orcmid)</font></dd>
      <dt>&nbsp;</dt>
      <dt><a name="Lifschitz1991">[Lifschitz1991]</a> <a name="[Lifschitz91]"></a></dt>
      <dd>Lifschitz, Vladimir (ed.) <i> Artificial Intelligence and Mathematical 
		Theory of Computation: Papers in Honor of John McCarthy</i>. Academic 
		Press (San Diego: 1991). ISBN 0-12-450010-2.<font size="-1"><br>
        &nbsp;&nbsp;&nbsp;&nbsp; John McCarthy was 64 in 1991 and these papers 
		are in his honor. I picked it up in the Stanford Bookstore in 1993 and 
		have held onto it all this time. It survived the cut of my last two 
		moves.&nbsp;<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 2000-07-18: There are a number of interesting 
		items here. One that I hadn&#39;t expected is a paper by Carolyn Talcott on 
		binding structures. There are also John C. Mitchell&#39;s &quot;On the 
		Equivalence of Data Representations&quot; to dig into as well as a number of 
		papers on inference systems, and dealing with recursive forms of 
		functions by Knuth and also Solomon Feferman.&nbsp;<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Robert Cartright&#39;s &quot;Lambda: the Ultimate 
		Combinator&quot; will be interesting because with the Miser Engine, lambda is 
		a defined operation on objects representing formulae, rather than being 
		part of the meta-notation. I don&#39;t get all of Cartright&#39;s idea, but I 
		want to.<br>
        &nbsp;&nbsp;&nbsp;&nbsp; There is a very revealing paper by Herbert 
		Stoyan, &quot;The Influence of the Designer on the Design -- J. McCarthy and 
		LISP.&quot; I was always baffled by the bugs in the original short definition 
		of the LISP evaluator, and here is some useful background on that. I 
		kept thinking I was simply thick and not getting it, when I first saw 
		the original LISP papers. The FUNARG problem is one that we simply will 
		not have and will not tolerate in Miser.<br>
        &nbsp;&nbsp;&nbsp;&nbsp; I also learned here that the Russian computer 
		scientist Andrei Ershov had died by 1991.&nbsp; That&#39;s very 
		disappointing. I had a very brief correspondence with Ershov in the 
		early 80&#39;s about some things I learned from his genuine extensions to 
		BNF, and now I cannot renew that discussion.<br>
        &nbsp;&nbsp; Content<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>Preface<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Contributor List</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; A Short Sketch of the Life and Career of John 
		McCarthy, <i>D.J. Israel</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Functional Instantiations in First-Order Logic,
        <i>R.S. Boyer</i>, <i>D.M. Goldschlag</i>, <i>M. Kaufmann</i>, and <i>
		J.S. Moore</i>&nbsp;&nbsp;<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Lambda: The Ultimate Combinator, <i>R. 
		Cartwright</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Proofs of Termination and the &quot;91&quot; Function, <i>
		S. Feferman</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Robots with Common Sense? <i>J.A. Feldman</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Ascribing Artificial Intelligence to (Simpler) 
		Machines, or When AI Meets the Real World, <i>R.E. Filman</i><br>
        </font>&nbsp;&nbsp;&nbsp; <font size="-1">The Design of Parallel 
		Programming Languages, <i>R.P. Gabriel</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Metaprogamming at Work in Automated 
		Manufacturing, <i>C. Goad</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; LISP + Calculus = Identities, <i>R.W. Gosper</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Model Checking vs. Theorem Proving: A 
		Manifesto, <i>J.Y. Halpern</i> and <i>M.Y. Vardi</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Algebraic Computation: The Quiet Revolution, <i>
		A.C. Hearn</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; LISP and Parallelism, <i>T. Ito</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Textbook Examples of Recursion, <i>D.E. Knuth</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; A Metalogic Programming Approach to Multi-Agent 
		Knowledge and Belief, <i>R. Kowalski</i> and <i>J.S. Kim</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Belief and Introspection, <i>H.J. Levesque</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Monotonicity Properties in Automated Deduction,
        <i>Z. Manna</i>, <i>M. Stickel</i>, and <i>R. Waldinger</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Circumscription and Disjunctive Logic 
		Programming, <i>J. Minker</i>, <i>J. Lobo</i> and <i>A. Rajasekar</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; On the Equivalence of Data Representations, <i>
		J.C. Mitchell</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Caution! Robot Vehicle!&nbsp; <i>H.P. Moravec</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Circumscription and Authority, <i>P.K. Rathmann</i>
        and <i>G. Wiederhold</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; The Frame Problem in the Situation Calculus: A 
		Simple Solution (Sometimes) and a Completeness Result for Goal 
		Regression, <i>R. Reiter</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; An Abstraction Mechanism for Symbolic 
		Expressions, <i>M. Sato</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Varieties of Context, <i>Y. Shoham</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; The Influence of the Designer on the Design -- 
		J. McCarthy and LISP, <i>H. Stoyan</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Binding Structures, <i>C. Talcott</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Logicism, AI, and Common Sense: John McCarthy&#39;s 
		Program in Philosophical Perspective, <i>R.H. Thomason</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; The Incorrectness of the Bisection Algorithm, <i>
		R. Weyhrauch</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>Index</i><br>
        &nbsp;&nbsp;&nbsp;</font></dd>
      <dt>[<a name="Motwani2001">Motwani2001</a>]</dt>
      <dd>Hopcroft, John E., Motwani, Rajeev., Ullman, John D.&nbsp; <i>
		Introduction to Automata Theory, Languages, and Computation</i>.&nbsp; 
		ed.2.&nbsp; Addison-Wesley (Boston, MA: 2001).&nbsp; ISBN 0-201-44124-1.&nbsp; 
		See [<a href="#Hopcroft2001">Hopcroft2001</a>]<br>
        &nbsp;&nbsp;&nbsp;</dd>
      <dt><a name="Papadimitriou1981">[Papadimitriou1981]</a></dt>
      <dd> Lewis, Harry R., Papadimitriou, Christos H. <i> Elements of the 
		Theory of Computation</i>. Prentice-Hall (Englewood Cliffs, NJ: 1981). 
		ISBN 0-13-273417-6.&nbsp; See [<a href="#Lewis1981">Lewis1981</a>]</dd>
      <dt>&nbsp;</dt>
      <dt><a name="Revesz1988">[Revesz1988]</a> <a name="[Revesz88]"></a></dt>
      <dd>Révész, György E. <i> Lambda-Calculus, Combinators and Functional 
		Programming</i>. Cambridge University Press (Cambridge, 1988). ISBN 
		0-521-34589-8.&nbsp;<font size="-1"><br>
        &nbsp;&nbsp;&nbsp;&nbsp; 2000-07-18: I have book-marked some material in 
		here on the idea of extensionally-equal (Definition 1.1, which comes up 
		in the theory for CL) and the nice explanation of the set-theoretic 
		model of functions and the procedural view of functions, considered the 
		older model.&nbsp;<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Chapter 3 is about combinators and constant 
		symbols and ways people have dealt with placeholders.<br>
        &nbsp;&nbsp;&nbsp;&nbsp; There are also representations of arithmetic 
		and logic (Boolean values) in CL, and the treatment of recursion is 
		something I need to understand better, especially around finding 
		fixed-points. There are additional things here, that can be used in 
		building implementations and applying Miser engines. For example, list 
		processing, handling infinite-lists, stuff like that. (I don&#39;t propose 
		to go down that road very far, but I have my eye out for useful 
		definitions for list-processing primitives, string manipulation, and 
		other things.) The Church-Rosser theorem is treated in here, also. And a 
		treatment of FP, the John Backus approach to functional programming.<br>
        &nbsp;&nbsp;&nbsp;&nbsp; I want to be very careful about how true and 
		false is represented in the Miser Engine. In one respect, true and false 
		can be represented any way that we want. But the primitive operation for 
		equality has to produce some sort of result and it, along with an idiom 
		for conditional evaluation, will create a truth representation. So I 
		want to come up with a comparison result that fits into this and is both 
		useful and revealing.<br>
        &nbsp;&nbsp; Content<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>Preface</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; 1. Introduction<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 2. Type-Free Lambda Calculus<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 3. Combinators and Constant Symbols<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 4. List Manipulation in Lambda-Calculus<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 5. Rule-Based Semantics of&nbsp;λ-expressions<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 6. Outlines of a Reduction Machine<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 7. Towards a Parallel Graph-Reduction<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Appendix A.&nbsp; A Proof of the Church-Rosser 
		Theorem<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Appendix B.&nbsp; Introduction to Typed 
		λ-Calculus<br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>Bibliographical notes<br>
        &nbsp;&nbsp;&nbsp;&nbsp; References<br>
        </i>&nbsp;&nbsp;&nbsp;</font></dd>
      <dt>[<a name="Sipser1997">Sipser1997</a>]</dt>
      <dd><a href="http://www-math.mit.edu/~sipser/" target="_top">Sipser, 
		Michael</a>.&nbsp;
        <i><a href="http://www-math.mit.edu/~sipser/book.html" target="_top">
		Introduction to the Theory of Computation</a></i>.&nbsp; PWS Publishing 
		(Boston, MA: 1997).&nbsp; ISBN 0-534-94728-X.<font size="-1"><br>
        &nbsp;&nbsp;&nbsp;&nbsp; &quot;You are about to embark on the study of a 
		fascinating and important subject: the theory of computation.&nbsp; It 
		comprises the fundamental mathematical properties of computer hardware, 
		software, and certain applications thereof.&nbsp; In studying this 
		subject we seek to determine what can and cannot be computed, how 
		quickly, with how much memory, and on which type of computational model.&nbsp; 
		The subject has obvious connections with engineering practice, and, as 
		in many sciences, it also has purely philosophical aspects.&quot;&nbsp; From 
		the <i>Preface</i>, p.<i>xi</i>.<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 2001-08-06: This book has been singled out for 
		use in a self-study/on-line-reading group project of the <a href="http://groups.yahoo.com/group/learn-cs-theory" target="_top">
		Learn-CS-Theory</a>
        on-line discussion group.&nbsp; The <a href="r010800.htm">syllabus</a> 
		follows the sections of the Contents.&nbsp; Participation on this group 
		is my peculiar way of having added yet one more unmastered tome on 
		computation theory to my collection.&nbsp; I shall use the structure 
		provided by the group, such as it may be, to forward my own adoption of 
		current CS concepts and terminology for application to The Miser 
		Project.<br>
        &nbsp;&nbsp; Content<br>
        &nbsp;&nbsp;&nbsp;&nbsp; Preface<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 0. Introduction<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.1 Automata, 
		Computability, and Complexity<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.2 Mathematical 
		Notions and Terminology<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.3 Definitions, 
		Theorems, and Proofs<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.4 Types of 
		Proof<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Exercises and 
		Problems<br>
        &nbsp;&nbsp;&nbsp;&nbsp; </i>Part One: <i>Automata and Languages<br>
        &nbsp;&nbsp;&nbsp;</i>&nbsp; 1. Regular Languages<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.1 Finite 
		Automata<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.2 
		Nondeterminism<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.3 Regular 
		Expressions<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.4 Nonregular 
		Languages<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Exercises and 
		Problems</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; 2. Context-Free Languages<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.1 Context-Free 
		Grammars<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.2 Pushdown 
		Automata<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.3 
		Non-context-free Languages<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Exercises and 
		Problems</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Part Two: Computability Theory<br>
        &nbsp;&nbsp;&nbsp;&nbsp; 3. The Church-Turing Thesis<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.1 Turing 
		Machines<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.2 Variants of 
		Turing Machines<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3.3 The 
		Definition of Algorithm<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Exercises and 
		Problems</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; 4. Decidability<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.1 Decidable 
		Languages<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4.2 The Halting 
		Problem<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Exercises and 
		Problems</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; 5. Reducibility<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.1 Undecidable 
		Problems from Language Theory<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.2 A Simple 
		Undecidable Problem<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5.3 Mapping 
		Reducibility<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Exercises and 
		Problems</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; 6. Advanced Topics in Computability Theory<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6.1 The Recursion 
		Theorem<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6.2 Decidability 
		of Logical Theories<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6.3 Turing 
		Reducibility<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6.4 A Definition 
		of Information<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Exercises and 
		Problems</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; Part Three: <i> Complexity Theory</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; 7. Time Complexity<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7.1 Measuring 
		Complexity<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7.2 The Class P<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7.3 The Class NP<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7.4 
		NP-Completeness<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7.5 Additional 
		NP-Complete Problems<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Exercises and 
		Problems</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; 8. Space Complexity<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8.1 Savitch&#39;s 
		Theorem<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8.2 The Class 
		PSPACE<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8.3 PSPACE-Completeness<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8.4 The Classes L 
		and NL<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8.5 
		NL-Completeness<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8.6 NL Equals 
		coNL<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Exercises and 
		Problems</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; 9. Intractability<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9.1 Hierarchy 
		Theorems<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9.2 
		Relativization<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9.3 Circuit 
		Complexity<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Exercises and 
		Problems</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; 10. Advanced Topics in Complexity Theory<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.1 
		Approximation Algorithms<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.2 
		Probabilistic Algorithms<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.3 Alternation<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.4 Interactive 
		Proof Systems<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.5 Parallel 
		Computation<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10.6 Cryptography<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Exercises and 
		Problems</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>Selected Bibliography</i><br>
        &nbsp;&nbsp;&nbsp;&nbsp; <i>Index<br>
        &nbsp;&nbsp;&nbsp;</i></font></dd>
      <dt>[<a name="Ullman2001">Ullman2001</a>]</dt>
      <dd>Hopcroft, John E., Motwani, Rajeev., Ullman, John D.&nbsp; <i>
		Introduction to Automata Theory, Languages, and Computation</i>.&nbsp; 
		ed.2.&nbsp; Addison-Wesley (Boston, MA: 2001).&nbsp; ISBN 0-201-44124-1.&nbsp; 
		See [<a href="#Hopcroft2001">Hopcroft2001</a>]<br>
        &nbsp;&nbsp;&nbsp;</dd>
    </dl>
  
</dl>

<hr color="#990033">

<small>
<div>
<dl>
  <dt><b><a name="v0.01">0.01</a> 2014-05-01-09:58 Repaved Version</b></dt>
	<dd>Along with updating to the current construction structure styles and 
	format, this page is adjusted for eventual transposition to Orcmid&#39;s Lair 
	for centralization of all bibliographies.&nbsp; Fragment identifires are 
	corrected to have valid XML NCName syntax.</dd>
	<dt><br>
	<b><a name="v0.00">0.00</a> 2000-07-18-17:03 Setup and Build Initial 
	Bibliography (orcmid)</b></dt>
</small>
  <dd><small>Provide bibliography page for use under the Miser Project</dd>
</dl>
</div>
</small>

<table border="0" cellspacing="3" width="100%">
  <tr>
    <td width="10%">
	<a href="index.htm">
	<img border="0" src="../images/hardhat-thumb.gif" width="80" height="60" alt="Construction Structure (Hard Hat Area)"></a></td>
    <td width="67%" valign="middle" align="center">
      <!--webbot bot="Include" U-Include="../construction/templates/00/c000005d.htm" TAG="BODY" startspan -->
<table border="0" width="100%" id="table1" cellpadding="0" style="border-collapse: collapse">
	<tr>
		<td>
<font face="Arial, Microsoft Sans Serif, Helvetica, Geneva, Swiss, Sans Serif">
<p align="center"> <small><small>You are navigating the <a href="../" target="_top">
Miser Project</a>.</small></small></p></font>
		</td>
	</tr>
</table>
<!--webbot bot="Include" endspan i-checksum="62759" -->
    </td>
    <td width="21%">
      <p align="right"><font size="-2">created 2000-07-18-17:03 -0700 (pdt) by 
		orcmid
      <em><br>
      $$Date: 17-08-29 16:40 $<br>
      $$Revision: 31 $</em></font></p>
    </td>
  </tr>
</table>

</body>
</html>
