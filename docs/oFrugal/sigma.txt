// sigma.txt 0.0.11                 UTF-8                          2024-05-16
//--|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*
//
//                       OBAP ABSTRACTION FUNCTIONS
//                       ===========================
//
//             <https://orcmid.github.io/miser/oFrugal/sigma.txt>
//
//                        HAND-COMPILED sigma(s, M)
//                        -------------------------
//
//
//       The sigma.s M function is introduced in Miser Project Discussion
//       Note #42.  This sigma.txt file demonstrates the manual compilation
//       of the sigma(s, M) Frugalese description into a raw oFrugal
//       implementation.
//
//       sigma(s, M) derives a script that when applied to an operand, L,
//       determines a version of M with L substituted wherever s occured:
//
//               sigma(s, M) L = subst(L, s) M
//
//       where subst(L, s) derives a substitution of L for s everywhere in its
//       operand.  Both forms are valuable.  Here, we take sigma as a starting
//       point and illustration for defining and confirming other forms.
//
//       Review the ^casep development for an introductory demonstration of
//       hand-compiling <https://orcmid.github.io/miser/oFrugal/casep.txt>.
//
//       This file is meant to be processable by oFrugal.
//
//       There is a serious practical requirement for hand-compiling the
//       sigma script.  The other abstraction procedures, λ.s, ρ.sigmas, and
//       λ.M in the σ.s definition rely upon σ.x applications in their
//       definitions/implementations.  That chicken-and-egg problem is
//       resolved by hand-crafting an initial sigma, here, which becomes
//       usable in the crafting and confirmation of all of the abstraction
//       utilities, including processing the λ-form expression of σ.s itself.
//
//       This bootstrapping of an initial σ.s is reminiscent of using early
//       programming-language compilers to compile the compiler written in
//       the language it compiles (e.g., compiling a C Language compiler
//       written in C Language, and how that first C Language compiler is
//       obtained by other means).
//
//               1. The Original Definition
//               2. λ-form Expression
//               3. Conjunction Conditions
//                  3.1 is-singleton(z) and is-enclosure(z)
//                  3.2 is-enclosure(R) ∧ is-enclosure(S)
//               4. let-/where-Form Expressions
//                  4.1 Single let/where form
//                  4.2 multiple let/where clauses
//               5. Putting It All Together
//                  ****** CONTINUATION TBA *****
//
//
//  1. THE ORIGINAL DEFINITION
//
//     From <https://github.com/orcmid/miser/discussions/42>,
//
//     σ.s M = if M = s                                             //  (1)
//             then .ARG
//             else if is-individual(M)
//                  then ` M
//                  else if is-enclosure(M)
//                       then let R = σ.s .a M
//                             in if is-enclosure(R)
//                                then ` M
//                                else .e :: R
//                       else let R = σ.s .a M,
//                                S = σ.s .b M
//                             in if is-enclosure(R) ∧ is-enclosure(S)
//                                then ` M
//                                else .c :: R :: S
//
//
//   2. λ-FORM EXPRESSION
//
//      Switch to the mixed oFrugal/Frugalese pseudo-code that
//      relies on application of λ-abstraction heuristics.
//
//     sigma = λ.s ρ.sigmas λ.M                                     //  (2)
//             if M = s
//             then .ARG
//             else if is-individual(M)
//                  then ` M
//                  else if is-enclosure(M)
//                       then let R = sigmas .a M                   // (2a)
//                             in if is-enclosure(R)
//                                then ` M
//                                else .e :: R
//                       else let R = sigmas .a M,                  // (2b)
//                                S = sigmas .b M
//                             in if is-enclosure(R) ∧ is-enclosure(S)
//                                then ` M
//                                else .c :: R :: S
//
//
//    3. CONJUNCTION CONDITIONS
//
//       The normal interpretation of P ∧ Q for oFrugal is by
//
//                 if P then Q else .b                                 (3a)
//
//       This short-circuit determination is valid in oFrugal because there
//       is no side-effect being skirted by failing to evaluate Q when
//       P evaluates to .b.
//
//       There is only one direct relation in oFrugal, it is for equality
//       of two obs.  That is enough.
//
//    3.1 is-singleton(z) and is-enclosure(z)
//
//           ob.is-singleton(z) ⇔ ob.b(z) = z                    (from Ob4)
//           ob.is-enclosure(z) ⇔ ob.is-singleton(z) ∧ ob.a(z) ≠ z
//
//       Translation of is-singleton(z) is directly to ( .d :: z :: .b :: z ).

//       The form ob.a(z) ≠ z is equivalent to ¬( ob.a(z) = z ).
//
//       For
//                    if ¬R then A else B
//
//       use          if R then B else A.
//
//       For is-enclosure(z), take the ob.a(z) ≠ z apart in that manner:
//
//                    if .a z = z
//                    then .b
//                    else is-singleton(z)
//
//       which expands further to
//
//          is-enclosure(z) = if .a z = z                            // (3b)
//                            then .b
//                            else .b z = z
//
//       The oFrugal idiom for is-enclosure(z) is then
//
//                     // if z = .a z                                // (3c)
//               .ev :: ( .d :: z :: .a :: z )
//
//                             // then .b
//                      :: ` (    .b
//
//                             // else z = .b z
//                             :: .d :: z :: .b :: z
//                               )
//
//
//    3.2 is-enclosure(R) ∧ is-enclosure(S)
//
//       By (3a), the (2b) form
//
//                 is-enclosure(P) ∧ is-enclosure(Q)
//
//       expands to
//
//               if is-enclosure(P)
//               then is-enclosure(Q)
//               else .b
//
//       and from there via (3b) to
//
//            // is-enclosure(P) ∧ is-enclosure(Q)                   // (3d)
//               if .a P = P
//               then .b
//               else if .b P = P
//                    then if .a Q = Q
//                         then .b
//                         else .b Q = Q
//                    else .b
//
//
//   4. let-/where-FORM EXPRESSIONS
//
//   4.1 Single let/where Forms
//
//      The oFrugal idiomatic handling of the forms
//
//          let v = T in U
//
//          U where v = T
//
//      require elimination of the literal v from U in this manner:
//
//          (λv U) T
//
//      The choice between let/where forms is driven by readability choises.
//      Mixtures are possible, as in
//
//          let v = T
//           in U
//              where r = M
//
//      which becomes
//
//          (λv ((λr U) M )) T
//
//      The hand-compiling of these forms will be explored in depth as part
//      of further topics.
//
//      For sigma.txt, the expression at (2a),
//
//          let R = sigmas .a M
//           in if is-enclosure(R)
//                 then ` M
//                 else .e :: R
//
//      is transformed to the form
//
//          λ.R ( if is-enclosure(R)                                 // (4a)
//                then ` M
//                else .e :: R
//                  )
//          sigmas .a M
//
//      There is an occurrence of M in the body of the λ.R abstraction.  This
//      leads to the M in ` M having to be inserted every time sigma recurses
//      on operand M, even for all the times is-enclosure(R) does not hold.
//
//      Avoid such deep substitution by abstracting M and applying that result
//      at the level where M is the current operand.
//
//         ( ( λ.R if is-enclosure(R)                                // (4b)
//                 then λ.M ` M
//                 else λ.M (.e :: R )
//                 )
//           sigmas .a .M
//           )
//          M
//
//      Since the result of (λ.R ...) application yields an effectively
//      M-abstracted script, the result can be evaluated in-line since M
//      is already the current (abstracted) operand:
//
//         .ev ( ( λ.R if is-enclosure(R)                            // (4c)
//                     then λ.M ` M
//                     else λ.M (.e :: R )
//                     )
//                sigmas .a M
//                )
//
//      is sufficient.
//
//
//   4.2 Multiple let/where Clauses
//
//      For the current M being a pair, the (2b) operation is
//
//          let R = sigmas .A M,                                     // (4d)
//              S = sigmas .B M
//           in if is-enclosure(R) ∧ is-enclosure(S)
//              then ` M
//              else .c :: R :: S
//
//      Readability of the where-form seems unappealing for this case although
//      the transformation is easily done.
//
//      For (4d) adapt the device employed at (4a).
//
//      There is is no benefit to creating a
//
//          ( (λ.R λ.S ...) sigmas .a M ) sigmas .b M
//
//      since both operands are always going to be required and consumed
//      immediately.
//
//     The applicative structure can be simplifed by operating on R and S as
//     a pair,
//
//           (λ.RS ...) ( sigmas .a M :: sigmas .b M ),
//
//      employing a variant of form (4c):
//                                                                   // (4e)
//           .ev ( ( λ.RS if is-enclosure(.a RS) ∧ is-enclosure(.b RS)
//                        then λ.M ` M
//                        else λ.M ( .c :: RS )
//                        )
//                 ( sigmas .a M :: sigmas .b M )
//                 )
//
//
//   5. PUTTING IT ALL TOGETHER
//       CONTINUE BELOW HERE
//       *******************
//
//
//  ****** BOILER PLATE BELOW HERE *** CUSTOMIZATION FOR SIGMA PENDING ****

//--|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*
//
//                   Copyright 2024 Dennis E. Hamilton
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//              http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//--|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*
//
// ATTRIBUTION
//
//   Hamilton, Dennis E. Hand-compiled sigma(s, M).  Miser Theory Conception
//   text file sigma.txt version 0.0.11 dated 2024-05-16, available on the
//   Internet as a version of
//   <https://orcmid.github.io/miser/oFrugal/sigma.txt>
//
//--|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*
//
// TODO
//
// * Refer to the idioms already provided for casep.
//
// * Break down into definitions of temporary forms so the combination into
//   the more-complex and unreadable mix of .self and .arg occurrences with
//   no symbols is comprehensible.
//
// * Point out that use of temp intermediate definitions is also part of
//   creating "macros" for building scripts.
//
//--|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*
//
// 0.0.11 2024-05-16T00:35Z More tidying around let-/where-forms
// 0.0.10 2024-05-15T15:26Z Touch-ups and touching-on where-form.
// 0.0.9 2024-05-14T16:47Z Polish down through section 4
// 0.0.8 2024-05-13T20:36Z Reorganize and smooth the material so far
// 0.0.7 2024-05-12T23:42Z Reorganize and improve conditional forms
// 0.0.6 2024-05-10T23:50Z Review and prepare to use temporary definitions
//       as a way of remaining comprehensible.
// 0.0.5 2024-05-08T23:39Z Complete hand-compiling of the conjunction case
// 0.0.4 2024-05-08T15:01Z Touch-Ups for printing and review
// 0.0.3 2024-05-07T16:17Z Touch-up and start expanding conjunction handling
// 0.0.2 2024-05-06T21:55Z Introduce listings for multiple let forms
// 0.0.1 2024-05-05T21:16Z Introduce handling single let forms
// 0.0.0 2024-05-05T18:36Z Create placeholder with boilerplate.
//
//                         *** end of sigma.txt ***
