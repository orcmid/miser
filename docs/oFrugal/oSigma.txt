// oSigma.txt 0.0.22                UTF-8                          2024-05-30
//--|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*
//
//                       OBAP ABSTRACTION FUNCTIONS
//                       ===========================
//
//             <https://orcmid.github.io/miser/oFrugal/obSigma.txt>
//
//                      HAND-COMPILED oSsigma(s, M)
//                      ---------------------------
//
//
//       The sigma.s M function is introduced in Miser Project Discussion
//       Note #42.  This oSigma.txt file demonstrates the manual compilation
//       of the sigma(s, M) Frugalese pseudo-language specification into a
//       raw oFrugal ^oSigma implementation.
//
//       oSigma(s, M) derives a script that when applied to an operand, L,
//       determines a version of M with L substituted wherever s occured:
//
//               oSigma(s, M) L = oSubst(L, s) M
//
//       where obSubst(L, s) derives a substitution of L for s everywhere in
//       its operand.  Both forms are valuable.  Here, we take oSigma as a
//       starting point and illustration for defining and confirming other
//       forms.
//
//       The applicative computational scheme is defined in the file
//       <https://orcmid.github.io/miser/obap/obaptheory.txt>.  Review the
//       caseep development for an introductory demonstration of hand-
//       compiling <https://orcmid.github.io/miser/oFrugal/casep.txt>.
//
//       This file is meant to be processable by oFrugal.
//
//       There is a serious practical requirement for hand-compiling the
//       sigma script.  The other abstraction procedures, λ.s, ρ.sigmas, and
//       λ.M in the σ.s definition rely upon σ.x applications in their
//       definitions/implementations.  That chicken-and-egg problem is
//       resolved by hand-crafting an initial oSigma, here, which becomes
//       usable in the crafting and confirmation of all of the abstraction
//       utilities, including processing the λ-form expression of σ.s itself.
//
//       This bootstrapping of an initial σ.s is reminiscent of using early
//       programming-language compilers to compile the compiler written in
//       the language it compiles (e.g., compiling a C Language compiler
//       written in C Language, and how that first C Language compiler is
//       obtained by other means).
//
//       The goal is to have a carefully hand-crafted ^oSigma script that
//       facilitates crafting of the additional abstraction forms, ^oLambda,
//       ^oRec, and ^oSubst.  From there, assembling procedure scripts in
//       Frugalese pseudo-code will be more easily-expressed and dependable.
//       As the dentist says, "It will only hurt for a little while."
//
//       Although oSigma and the related oSubst are precise algorithms,
//       The scripts ^oLambda and ^oRec are heuristics and imperfect in
//       ways that will be accounted for with introduction of those scripts.
//
//               1. The Original Definition
//               2. λ-form Expression
//               3. Conditionals
//                  3.1 is-singleton(z), is-individual(z), and is-enclosure(z)
//                  3.2 is-enclosure(R) ∧ is-enclosure(S)
//               4. let-/where-Form Expressions
//                  4.1 Single let/where form
//                  4.2 multiple let/where clauses
//               5. Putting It All Together
//                  ****** CONTINUATION TBA *****
//
//
//  1. THE ORIGINAL DEFINITION
//
//     From <https://github.com/orcmid/miser/discussions/42>,
//
//     σ.s M = if M = s                                             // (1)
//             then .arg
//             else if is-individual(M)
//                  then ` M
//                  else if is-enclosure(M)
//                       then let R = σ.s .a M
//                             in if is-enclosure(R)
//                                then ` M
//                                else .e :: R
//                       else let R = σ.s .a M,
//                                S = σ.s .b M
//                             in if is-enclosure(R) ∧ is-enclosure(S)
//                                then ` M
//                                else .c :: R :: S
//
//
//   2. λ-FORM EXPRESSION
//
//      Switch to the mixed oFrugal/Frugalese pseudo-code that
//      relies on application of λ-abstraction procedures.
//
//     sigma = λ.s ρ.sigmas λ.M                                     // (2)
//             if M = s
//             then .arg
//             else if is-individual(M)                             // (2a)
//                  then ` M
//                  else if M = .b M  // hence is-enclosure(M)      // (2b)
//                       then let R = sigmas .a M                   // (2c)
//                             in if is-enclosure(R)                // (2d)
//                                then ` M
//                                else .e :: R
//                       else let R = sigmas .a M,                  // (2e)
//                                S = sigmas .b M
//                             in if is-enclosure(R)                // (2f)
//                                   ∧ is-enclosure(S)
//                                then ` M
//                                else .c :: R :: S
//
//
//    3. CONDITIONALS
//
//    3.1 is-singleton(z), is-individual(z), and is-enclosure(z)
//
//           ob.is-individual(z) ⇔ ob.a(z) = z
//            ob.is-singleton(z) ⇔ ob.b(z) = z                    (from Ob4)
//            ob.is-enclosure(z) ⇔ ob.is-singleton(z) ∧ ob.a(z) ≠ z
//
//                where ob.a(z) ≠ z is equivalent to ¬ is-individual(z).
//
//    3.1.1 is-singleton amd is-enclosure
//
//       Translation of is-singleton(z) is directly to ( .d :: z :: .b :: z ).
//       We can produce an oFrugal script for the applicative form.  The
//       companion is-individual is expressible in the same manner

!def ob ^oIsSingleton
        = // λz (z = .b z)
          .d :: .arg :: .b :: .arg ;

!def ob ^oIsIndividual
        = // λz (z = .a z)
          .d :: .arg :: .a :: .arg ;

//       Note how the abstracted literal symbol "z" has no distinct residue
//       upon its abstraction. The .arg form serves the abstract purpose.
//
//    3.1.2 is-enclosure

//       The form ob.a(z) ≠ z is equivalent to ¬( ob.a(z) = z ).
//
//       For
//                    if ¬R then A else B
//
//       use          if R then B else A.
//
//       Now for is-enclosure(R) of (2d), there are two ways to do this, with
//
//           is-enclosure(R) = if is-singleton(R)                    // (3a1)
//                             then if is-individual(R)
//                                  then .b
//                                  else .a
//                             else .b
//      and with
//
//          is-enclosure(R) = if .a R = R                            // (3a2)
//                            then .b
//                            else is-singleton(R)
//
//      The (3a2) form seems the most elegant, yet (3a1) may be a better
//      choice if we want to rule out non-singletons quickly.  Here I opt for
//      the simplicity of (3a2), which expands further to
//
//          is-enclosure(R) = if .a R = R                            // (3b)
//                            then .b
//                            else .b R = R
//
//      The oFrugal idiom for is-enclosure(R) is then
//
//                          // if R = .a R                           // (3c)
//               .ev :: ( .d :: R :: .a :: R )
//
//                   :: ` ( // then .b
//                            .b
//                          ::
//                          // else R = .b R
//                            .d :: R :: .b :: R
//                          )
//
//     Abstracting R completes the hand-compilation:

!def ob ^oIsEnclosure
        = // λR        if R = .a R
         .ev :: ( .d :: .arg :: .a :: .arg )
             :: ` ( // then .b
                       .b
                    ::
                    // else R = .b R
                       .d :: .arg :: .b :: .arg
                    );


//    3.2 is-enclosure(R) ∧ is-enclosure(S)
//
//       The computational idiom for P ∧ Q in oFrugalese is
//
//                 if P then Q else .b                                 (3d)
//
//       This short-circuit determination is valid because there are no
//       side-effects in oMiser, so failing to evaluate Q when P evaluates
//       to .b is valuable.
//
//       There is only one direct relation in oMiser; it is for equality
//       of two obs.  That is sufficient.
//
//       By (3d), the (2f) form
//
//                 is-enclosure(R) ∧ is-enclosure(S)
//
//       expands to
//
//               if is-enclosure(R)                                  // (3e)
//               then is-enclosure(S)
//               else .b
//
//       and from there via (3b) to
//
//            // is-enclosure(R) ∧ is-enclosure(S)                   // (3f)
//               if .a R = R
//               then .b
//               else if .b R = R
//                    then if .a S = S
//                         then .b
//                         else .b S = S
//                    else .b
//
//      Expanding to the raw oFrugal form for (3f),
//
//        //     is-enclosure(R) ∧ is-enclosure(S)                   // (3g)
//                   // if R = .a R
//        .ev :: ( .d :: R :: .a :: R )
//
//            :: ` ( // then .b
//                     .b
//                   ::
//                   // else         if R = .b R
//                     .ev :: ( .d :: R :: .b :: R )
//
//                         :: ` ( // then        if S = .a S
//                                (.ev :: (.d :: S :: .a :: S)
//
//                                     :: ` ( // then .b
//                                               .b
//                                            ::
//                                            // else S = .b S
//                                               .d :: S :: .b :: S
//                                            )
//                                     )
//                                ::
//                                // else .b
//                                  .b
//                                )
//                  )
//
//      This is a bit more compact than using (3e) and ^oIsEnclosure.  Whether
//      that is worthwhile will depend on the context in which this
//      conjunction occurs (cf. 4.2 below).
//
//
//   4. let-/where-FORM EXPRESSIONS
//
//   4.1 Single let/where Forms
//
//      The oFrugal idiomatic handling of the forms
//
//          let v = T in U
//
//          U where v = T
//
//      require abstraction of the literal v from U in this manner:
//
//          (λv U) T
//
//      The choice between let/where forms is driven by readability
//      considerations.
//
//      Mixtures are possible, as in
//
//          let v = T
//           in U
//              where r = M
//
//      which becomes
//
//          (λv ((λr U) M )) T
//
//      The hand-compiling of these forms will be explored in depth later on.
//
//      For oSigma.txt, the expression at (2c),
//
//          let R = sigmas .a M                                         (2c)
//           in if is-enclosure(R)                                      (2d)
//                 then ` M
//                 else .e :: R
//
//      is transformed to the form
//
//          λ.R ( if is-enclosure(R)                                 // (4a)
//                then ` M
//                else .e :: R
//                  )
//          sigmas .a M
//
//      There is an occurrence of M in the body of the λ.R abstraction.  This
//      leads to the M in ` M having to be inserted every time sigma recurses
//      on operand M, even for all the times is-enclosure(R) does not hold.
//
//      Avoid such deep substitution by abstracting M and applying that result
//      at the level where M is the current operand.
//
//         ( ( λ.R if is-enclosure(R)                                // (4b)
//                 then λ.M ` M
//                 else λ.M (.e :: R )
//                 )
//           sigmas .a .M
//           )
//          M
//
//      Since the result of (λ.R ...) application yields an effectively
//      M-abstracted script, the result can be evaluated in-line since M
//      is already the current (abstracted) operand:
//
//         .ev ( ( λ.R if is-enclosure(R)                            // (4c)
//                     then λ.M ` M
//                     else λ.M (.e :: R )
//                     )
//                sigmas .a M
//                )
//
//      is sufficient.
//
//      For insertion of hand-compiled (2c), we will take advantag of the
//      previously-defined ^oIsEnclosure script below (3c).

!def ob ^_M-enclosure

        = // ρ.sigmas λ.M

              // (  λ.R           if is-enclosure(R)
          .ev :: `( .ev :: ^oIsEnclosure

                        :: ` ( // then λ.M ` M
                                  `( .e :: .arg )
                               ::
                               // else λ.M (.e :: R )
                                  .e :: .c :: .e :: .arg
                               )
                    )
              // ) where R = sigmas .a M
              :: .self :: .a :: .arg ;

//
//   4.2 Multiple let/where Clauses
//
//      For the current M being a pair, the (2e) operation is
//
//          let R = sigmas .a M,                                     // (2e)
//              S = sigmas .b M
//           in if is-enclosure(R) ∧ is-enclosure(S)
//              then ` M
//              else .c :: R :: S
//
//      Readability of the where-form seems unappealing for this case although
//      the transformation is easily done.
//
//      For (2e) we can adapt the device employed at (4a) except there is no
//      benefit to creating a
//
//          ( (λ.R λ.S ...) sigmas .a M ) sigmas .b M
//
//      since both operands are always going to be required and consumed
//      immediately.
//
//     The applicative structure can be simplifed by operating on R and S as
//     a pair,
//
//           (λ.RS ...) ( sigmas .a M :: sigmas .b M ),
//
//      employing a variant of form (4c):
//                                                                   // (4e)
//           .ev ( ( λ.RS if is-enclosure(.a RS) ∧ is-enclosure(.b RS)
//                        then λ.M ` M
//                        else λ.M ( .c :: RS )
//                        )
//                 ( sigmas .a M :: sigmas .b M )
//                 )
//
//
//   5. PUTTING IT ALL TOGETHER
//       CONTINUE BELOW HERE
//       *******************
//
//
//  ****** BOILER PLATE BELOW HERE *** CUSTOMIZATION FOR SIGMA PENDING ****

//--|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*
//
//                   Copyright 2024 Dennis E. Hamilton
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//              http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
//--|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*
//
// ATTRIBUTION
//
//   Hamilton, Dennis E. Hand-compiled sigma(s, M).  Miser Theory Conception
//   text file oSigma.txt version 0.0.22 dated 2024-05-30, available on the
//   Internet as a version of
//   <https://orcmid.github.io/miser/oFrugal/oSigma.txt>
//
//--|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*
//
// TODO
//
// * Refer to the idioms already provided for casep.
//
// * Break down into definitions of temporary forms so the combination into
//   the more-complex and unreadable mix of .self and .arg occurrences with
//   no symbols is comprehensible.
//
// * Point out that use of temp intermediate definitions is also part of
//   creating "macros" for building scripts.
//
// * This should probably be moved to the lambda topic, although sigma is a
//   simple rewriting procedure.
//
// * Use abstraction tricks to allow combination in parts that remain
//   faithful to the components.
//
// * I am unclear when and how to start using abstracted chunks for making
//   the composed final form in some clean way.  I feel like I am losing my
//   grip on this.  I think I will look at how to assemble the bits and then
//   go back and extract the makers that make sense.
//
//--|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*
//
// 0.0.22 2024-05-30T01:35Z Touch-up ^_M-enclosure
// 0.0.21 2024-05-30T00:03Z Improve through ^_M-enclosure
// 0.0.20 2024-05-28T01:02Z Adding oIsIndividual, oIsSingleton, oIsEnclosure.
// 0.0.19 2024-05-27T22:49Z Cleaning up layout and formula labels
// 0.0.18 2024-05-26T20:10Z Adjusting to renaming again, working toward macros
// 0.0.17 2024-05-26T18:07Z Adjust to the renaming and ponder macro helpers
// 0.0.16 2024-05-26T16:10Z TODO Prep for renaming from sigma to obSigma
// 0.0.15 2024-05-22T17:29Z Simple typo fixes
// 0.0.14 2024-05-20T23:23Z Cleanup through 4.1 with more steps consistency
// 0.0.13 2024-05-18T18:08Z Touching up around hand-codings
// 0.0.12 2024-05-17T22:14Z More hand-coding of conjunctions
// 0.0.11 2024-05-16T00:35Z More tidying around let-/where-forms
// 0.0.10 2024-05-15T15:26Z Touch-ups and touching-on where-form.
// 0.0.9 2024-05-14T16:47Z Polish down through section 4
// 0.0.8 2024-05-13T20:36Z Reorganize and smooth the material so far
// 0.0.7 2024-05-12T23:42Z Reorganize and improve conditional forms
// 0.0.6 2024-05-10T23:50Z Review and prepare to use temporary definitions
//       as a way of remaining comprehensible.
// 0.0.5 2024-05-08T23:39Z Complete hand-compiling of the conjunction case
// 0.0.4 2024-05-08T15:01Z Touch-Ups for printing and review
// 0.0.3 2024-05-07T16:17Z Touch-up and start expanding conjunction handling
// 0.0.2 2024-05-06T21:55Z Introduce listings for multiple let forms
// 0.0.1 2024-05-05T21:16Z Introduce handling single let forms
// 0.0.0 2024-05-05T18:36Z Create placeholder with boilerplate.
//
//                         *** end of sigma.txt ***
