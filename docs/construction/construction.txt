construction.txt 0.0.5               UTF-8                       dh:2019-11-24
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

                           The Miser Project Code
                           ======================

<https://github.com/orcmid/miser/blob/master/docs/construction/construction.txt>

              GITHUB MISER PROJECT DOCS CONSTRUCTION MATERIAL
              -----------------------------------------------

MANIFEST

  construction.txt
               this manifest and job-jar file

         index.md
               <https://orcmid.github.io/miser/construction/>
               markdown source

       current/
               page that renders with the current theme, demonstrating
               its markup provisions.

         plain/
               documentation of how current rendered when the default docs/
               publication was employed with no explicit introduction of a
               template.


 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                      Copyright 2019 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 TODO

   * Find a clean way to talk about the *authored" documentation and the
    *authoring" source that is published to be the documentation.  Need some
    nomenclature that I don't keep tripping over.

  * Identify adaptation of the infrastructure technique used on sites such
    as miser-theory or the nfoCentrale sites in general.  Find appropriate
    links.

  * Find a theme that supports reflow.  The Pages templates do not seem to
    provide for that.

  * If a theme is customized, determine where and how that works.

  * I am trusting that this material is current as of 2019-11-20:
    <https://help.github.com/en/github/working-with-github-pages/getting-started-with-github-pages>

  * The default rendering, with no template, provides reflow in the manner
    required for Miser Project documentation.  How to ensure that with any
    of the provided themes remains to be understood.

   * Determine how I can have some kind of versioning on my .md pages and
     have that part be private (not rendered).  It depends on the GitHub
     Markdown and maybe some YAML control.  Must find out about that.

   * Work through all of the feature cases of GitHub Markdown to see what
     works with the default template.  Use construction/test/ or example/
     for that.

   * Create a test document (set) that demonstrates the main Markup
     provisions.

   * Create a folder (i.e., plain/ that carries captured images of the
     current test/demo document under the default template)

   * Create a version of the text ruler for the markdown pages.

   * Make a template for the index.md source pages.

   * Maybe it is harmonious to call this the Construction Zone ?

   * Also, "Document Engineering"

   * Add a forensics folder on web-site and authoring, plus trouble-shooting,
     reverse-engineering, etc.

   * Could also introduce document-engineering in a sub-folder also.

   * Confirm preservation with pre-HTML5 browsers, such as Internet Explorer.

   * The "improve this page" and edit/master link requires being logged-in to
     GitHub.  We need a way to suppress that.  Document this in "plain."

  * The folio system is a bit different here.  There can be a counterpart in
    how pages and their assets are in folders.  The idea of version sequences
    does not quite work unless we take it to a lower level.  The use of insert
    pages might have no counterpart here.  Having the effect would take
    copying.

  * GitHub, and use of Git, provides a valuable history and provenance system.
    It requires access to such "document forensic" tools and doesn't support
    removed prints of pages the way I have desired.

  * The missing here is construction zones and also the job jar xyymmnna.htm
    pages.  At the moment, construction structure is in the <folder>.txt files
    like this one.  The Construction Material folder is now equivalent to the
    Construction Zone scheme on nfoCentrale.

  * Repair the substructure and content of construction/ to reside directly at
    docs/construction/ and https://orcmid.github.io/miser/construction.

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 0.0.6 2019-11-24-10:38 More consolidation and management of TODOs
 0.0.5 2019-11-24-09:36 Manage TODOs and adjustment of content to location at
       docs/construction.
 0.0.4 2019-11-24-09:20 Manage TODOs and preparation for movement to docs/
       level
 0.0.3 2019-11-21-10:29 Touch-up and manage TODOs
 0.0.2 2019-11-20-17:46 Add current/
 0.0.1 2019-11-20-15:19 Manage TODOs
 0.0.0 2019-11-20-14:01 Create placeholder and initial job jar for Miser
       Project documentation authoring "about/construction/"

                      *** end of construction.txt ***
