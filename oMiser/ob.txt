ob.txt 0.0.5                    UTF-8                            dh:2017-12-27

                           The Miser Project Code
                           ======================
                            
         <https://github.com/orcmid/miser/blob/master/oMiser/ob.txt>

      ‹ob› MATHEMATICAL STRUCTURE, DATA REPRESENTATION, AND EXPRESSIONS
      ----------------------------------------------------------------
              
    Formulation of the mathematical structure, ‹ob›, illustrates the bridge 
    between mathematical logic and theoretical limitations of all present-
    day computation systems. The ‹ob›-based computation model, although
    low-level, is as powerful, with respect to those limits, as any other 
    model.  A central purpose of the Miser Project is demonstration
    of how that is the case and to draw the connection with an operational
    realization.
      
    Under the Miser ‹ob› computational model, obs serve interchangeably as data
    and as scripts of procedures -- computational methods -- for operating on
    obs.  This quality of stored-program computers is central to the ‹ob›
    formulation of Miser computation.
      
 1. MATHEMATICAL STRUCTURE 

    There are two levels to the mathematical structure: elementary data
    representation and oMiser procedure expression.  
    
    Elementary data consist of arbitrary obs having no intrinsic significance
    beyond satisfaction of the conditions specified in the file obtheory.txt,
    <https://github.com/orcmid/miser/blob/master/oMiser/obtheory.txt>.
    
      * There are two selector functions, ob.a(z) and ob.b(z) that operate
        on any ob and determine an ob.
        
      * There is an arbitrary supply of distinct individuals, including ob.NIL.
        For any individual, z, ob.a(z) = ob.b(z) = z.  
        
      * For z any ob, the function ob.e(z) determines the ob such that 
        ob.a(ob.e(z)) = z and ob.b(ob.e(z)) = ob.e(z).  We speak of ob.e(z)
        as encapsulation of z.  
        
      * The individuals and encapsulations together are identified as 
        singletons because they share the property that ob.b(z) = z
        for either.
        
      * For any obs x and y, the function ob.c(x, y) determines the pair
        such that ob.a(ob.c(x,y)) = x and ob.b(ob.c(x,y)) = y and neither
        x nor y is the same as ob.c(x,y).  
        
      * For all obs, there are definite functions that determine when 
        obs are the same or different and also,
           - ob.is-individual(z) true whenever ob.a(z) = z
           - ob.is-singleton(z) true whenever ob.b(z) = z
           - ob.is-pair(z) whenever ob.is-singleton(z) is false
           - ob.is-enclosure(z) whenever ob.is-singleton(z) is true 
             but ob.is-individual(z) is false.
             
      * The enrichment of obs for particular applications is solely by
        introduction of distinct individuals.
           
 2. DATA REPRESENTATION
 
    The mathematical formulation of elementary obs provides a prescription
    for how one can establish computational procedures that preserve exactly
    those characteristics.
    
    There is a standard oFrugal formula notation for more-compact expression of
    obs in Unicode texts.  Although adaptations are required depending on 
    media and platform capabilities, definitions of such representations alway
    map to the reference notation.
      
      * distinct, fixed individuals are given unique alphanumeric identifiers.
        
      * e(x) is expressed as ‵ x, with ‵ a (unary) prefix operator.
        ‵ is the reversed prime Unicode character, U+2036 ‵.  It can be
        entered at keyboards using the grave accent, U+0060 `, also. 
              
      * c(x, y) is expressed x :: y
      
      * parenthesese are used for grouping.  The grouping of :: is to
        the right.  E.g.,  
        
                       x :: y :: z = x :: (y :: z).  
                       
      Similarly, ‵, groups first.  E.g., 
      
                            ‵ ‵z = ‵(‵z), and 
                 x :: ‵y :: ‵ ‵z = x :: ((‵y) :: (‵(‵z))). 
     
      * Fixed individuals, specified as primitives in the theory, are
        written with "." as a prefix.  E.g., ‹ob›-theory ob.NIL is expressed
        ".NIL".  Similarly, obap.ARG and obap.EV primitives are signified
        by .ARG and .EV, respectively.  Primitive individuals have specific
        interpretation in obs that are treated as expression of computations.
        
      * There are literal individuals (lindies) that can be introduced and used
        for any purpose.  A lindy is specified with alphanumeric sequence
        that always begins with a (Unicode) letter.  E.g., X, alpha, β, デニス,
        and ℵ.  They can serve as symbols for any user purpose.      
     
    Here is reference notation for an ob that might be used as a small
    dictionary.
    
        (English::en)::(Русский::ru)::(日本語::ja)::(Français::fr)::‵default  (1)
        
    All of the terms are lindies.
        
 3. FRUGALESE EXPRESSIONS
 
    The reference notation is known as Frugalese.  The oFrugal computer software
    supports this notation on all platforms.
        
    For convenient use of obs as lists of something, there is additional
    Frugalese that can be very useful in the expression of data.  
    
        [English::en, Русский::ru, 日本語::ja, Français::fr, ‵default:]       (2)
        
    The list-style form above expresses the same ob as the preceding example.
    This is a "sugaring" of the reference notation.  It is convenient syntax for
    a variety of list-shaped data structures.  The ob (2) is the same as the 
    previous form (1).
        
    Here is reference notation for an ob that happens to be useful as a 
    script.
      
        .C :: ‵.C :: (.C :: (.E :: (.C :: (.E :: .ARG) :: ‵.ARG))             (3)
                         :: ‵(.C :: (.E :: .ARG) :: ‵.ARG) )
                       
    Frugalese applicative-expression notation is another sugaring that makes
    the applicative structure of scripts more evident.
    
        .C ‵.C  (.C  (.E  .C (.E .ARG) ‵.ARG)                                 (4)
                    ‵(.C (.E .ARG) ‵.ARG) )       
    
    The sugaring (4) expresses the same ob as the form (3).  The use of 
    indentations and spacing to clarify structure is a presentation convenience.
    Sugared and reference forms can be used in combination to provide stream-
    lined expression of the intended employment of an ob.
    
 4. APPLICATIVE POWER
    
    That everything ends up being at the (reference) ob level one way or another 
    is fundamental to the oMiser computational model.  This is the Miser form 
    of the stored-program principle by which computers interpret data as
    procedures and procedures as data.
    
    The example just-above is called cS, having the useful property that, for
    scripts x and y and data ob z, with ap the obap.ap function,
    
       ap(ap(ap(cS,x),y),z) = ap(ap(x,z),ap(y,z))                            (5)
       
    and, in Frugalese, 
    
       cS(x,y) z = x(z) y(z)                                                 (6)
       
    or the more-familiar yet equivalent Frugalese,
    
       cS(x,y,z) = x(z,y(z))                                                 (7)
       
    illustrating the use of scripts to distill new script objects and apply
    them in further operations.  This sort of construction will be used in
    useful and powerful ways.  The first challenge will be making it easier
    to comprehend and produce such scripts.  We'll use scripts to help us 
    make further scripts in doing so.
         
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                       Copyright 2017 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
 0.0.5 2017-12-27-13:06 Improve the layout and use consistent capitaliation of
       "cS" everywhere. 
 0.0.4 2017-11-15-08:22 Add interpretation of cS to complete the expression
       case with section 4, Applicative Power.
 0.0.3 2017-11-12-09:47 Manage TODOs.  Edit the text.
 0.0.2 2017-11-11-10:44 Introduce prefix ‵ (U+2036) and text improvements.
 0.0.1 2017-11-10-11:59 Adjust TODOs.  Correct the GitHub URL.  Introduce
       basic Frugalese for expression of obs as data and obs as scripts.
 0.0.0 2017-09-13-10:44 Placeholder and boiler plate for a note on Obs
       as ‹ob› mathematical structure, computational manifestation, data
       representation, and storage model.  

                              *** end of ob.txt ***