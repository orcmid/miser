ob-exp.txt 0.0.3                     UTF-8                       dh:2018-01-30
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*


                           The Miser Project Code
                           ======================
                            
      <https://github.com/orcmid/miser/blob/master/oMiser/ob-exp.txt>

      FRUGALESE GRAMMAR FOR EXPRESSING THE OMISER COMPUTATION OF OBS
      --------------------------------------------------------------

    Ob-exp texts are used as a means of specifying obs and computations
    with them to derive an ob result.  Ob-exp is an expression language
    that is used in digital communication of computations with obs and 
    also used to submit expressions for oMiser computation via oFrugal.
    
    ob-exp has a context-free grammar, here specified using the original
    Backus-Naur Form (BNR) employed in the Revised Report on the 
    Algorithmic Language ALGOL 60.  The grammar specifies exactly those
    expressions that can be evaluated to a single ob when submitted
    to a processor such as an oFrugal implememtation.

    In addition to the grammatical structure for composing ob-exp
    expressions, there is also a formal definition of the the computation
    by which an ob-exp is evaluated.

 1. SUMMARY GRAMMAR

    The following summary form of the grammar is useful for reference.
    It does not address the grammatical differences that are called for
    to align with the interpretation rules by which an ob-exp is evaluated
    to yield a single ob result.  Nevertheless, all ob-exps have the form
    of the summary grammar, even if there are alternative structures for
    interpretation of identical texts.

    〈term〉 ::= 〈lindy〉 | 〈primitive〉 | 〈binding-name〉

    〈list-terms〉 ::= 〈ob-exp〉 | 〈list-terms〉, 〈ob-exp〉
    〈list-form〉 ::= [ ] | [ 〈list-terms〉 ] | [ 〈list-terms〉 :]

    〈parameters-form〉 ::= ( 〈list-terms〉 ) | 〈list-form〉

    〈function-form〉 ::= 〈term〉 | 〈function-form〉 〈parameters-form〉

    〈obap-form〉 ::= ( 〈ob-exp〉 ) | 〈list-form〉 | 〈obap-form〉 〈parameters-form〉

    〈unary〉 ::= 〈function-form〉 | ‵ 〈obap-form〉 | ‵ 〈unary〉 

    〈ae-form〉 ::= 〈unary〉 | 〈unary〉 〈ae-form〉
    〈ae〉 ::= 〈ae-form〉 | 〈obap-form〉 〈ae-form〉

    〈binary〉 ::= 〈ae〉 | 〈ae〉 :: 〈binary〉

    〈ob-exp〉 ::= 〈binary〉

 2. EXPRESSION INTERPRETATION

    Interpretation of expressions as obs is accomplished using a special
    formula notation in the ‹ob› theory language, Ot.

        I category ⎾pattern⏋(parameter)

    where    category is one of the syntactic categories, such as
                      〈ob-exp〉, 〈ae〉, and 〈term〉
              pattern is one of the patterns for the particular category,
                      such as 〈binary〉, 〈obap-form〉 〈ae-form〉, and 〈lindy〉
          (parameter) is an optional parameter.

    For example,

        I〈ae〉⎾〈obap-form〉 〈ae-form〉⏋=: obap.ap(I〈obap-form〉,I〈ae-form〉) 

    On the right-hand side of the "=:" the category names refer to those
    in the pattern on the left-hand side, and the interpretations of those
    occurrences is called for to determine the individual ob that is the 
    evaluation.

 3. TEXT, CHARACTERS, SPACING, AND LAYOUT CONSIDERATIONS

 4. TERMS

     〈term〉 ::= 〈lindy〉 | 〈primitive〉 | 〈binding-name〉

 5. LIST FORMS
   
    〈list-body〉 ::= 〈ob-exp〉 ] | 〈ob-exp〉 :] | 〈ob-exp〉, 〈list-body〉
    〈list-form〉 ::= [ ] | [ 〈list-body〉   

    I〈list-form〉⎾[ ]⏋=: ob.NIL 
    I〈list-form〉⎾[ 〈list-body〉 ⏋=: I〈list-body〉 

    I〈list-body〉⎾〈ob-exp〉 ]⏋=: ob.c(I〈ob-exp〉, ob.NIL) 
    I〈list-body〉⎾〈ob-exp> :]⏋=: I〈ob-exp〉 
    I〈list-body〉⎾〈ob-exp〉, 〈list-body〉⏋=: ob.c(I〈ob-exp〉,I〈list-body〉) 

 6. FUNCTIONAL FORMS

    〈function-form〉 ::=  〈term〉 | 〈function-form〉 〈list-form〉
                        | 〈function-form〉 ( 〈arguments〉 )
    〈obap-form〉 ::= ( 〈ob-exp〉 ) | 〈obap-form〉 〈list-form〉 
                        | 〈obap-form〉 ( 〈arguments〉 )
    〈arguments〉 ::= 〈ob-exp〉 | 〈arguments〉, 〈ob-exp〉

    I〈function-form〉⎾〈term〉⏋=: I〈term〉 
    I〈function-form〉⎾〈function-form> 〈list-form〉 ⏋
                    =: obap.ap(I〈function-form〉, I〈list-form〉 ) 
    I〈function-form〉⎾〈function-form〉 ( 〈arguments〉 )⏋
                    =: I〈arguments〉( I〈function-form〉 ) 

    I〈obap-form〉⎾( 〈ob-exp〉 )⏋=: I〈ob-exp〉 
    I〈obap-form〉⎾〈obap-form> 〈list-form〉 ⏋
                    =: obap.ap(I〈obap-form-form〉, I〈list-form〉 ) 
    I〈obap-form〉⎾〈obap-form〉 ( 〈arguments〉 )⏋
                    =: I〈arguments〉( I〈obap-form〉 )                     

    I〈arguments〉⎾〈ob-exp〉⏋(p) =: ob.ap(p, I〈ob-exp〉 ) 
    I〈arguments〉⎾〈arguments〉, 〈ob-exp〉⏋(p)
                    =: obap.ap( I〈arguments〉(p), I〈ob-exp〉) 

 7. TO BE CONTINUED ...        
        
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                   Copyright 2018 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 0.0.4 2018-01-30-21:42 extend the formal grammar through 6. Functional Forms
 0.0.3 2018-01-30-18:17 Capture the summary grammar and the formalism by
       which grammatical constructions are interpreted as expressions of obs.
 0.0.2 2018-01-29-21:34 Corrected with fixes from Roman Susi (@rnd0101)
 0.0.1 2018-01-28-15:26 Provide initial summary grammar for ob-exp.
 

                     *** end of ob-exp.txt ***