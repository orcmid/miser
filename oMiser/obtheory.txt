obtheory.txt 0.0.16                  UTF-8                       dh:2017-09-06

                          MISER THEORETICAL CONCEPTION
                          ============================
                            
        <https://github.com/orcmid/miser/blob/master/oMiser/obtheory.txt>

                           ‹ob› MATHEMATICAL STRUCTURE
                           --------------------------
                        
   The mathematical structure, ‹ob› = 〈Ob,Of,Ot〉consists of
   
           Ob, all of the obs
           Of, all functions on obs
           Ot, the applied logic in which the structure is 
               characterized

LOGICAL NOTATION
               
   For Ot, standard first-order logic with equality is employed.  An 
   equational format is used with variables understood to be universally
   quantified over the domain of discourse, Ob.  Set theory is not
   employed.
   
   Specific predicates and functions are introduced by presentation of
   their characteristics in mathematical axioms that distinguish them.  The
   logical theory is expressed using the following notation.

      p ⇔ q read p if-and-only-if q, true when true both are true or
             both are false, a kind of logical equality relation
          
      p ⇒ q read if p then q and when true, the truth of q is
             deducible from the truth of p
       
      p ∨ q is logical or, true when p and q are not both false
       
      p ∧ q is logical and, true when p and q are both true
       
        ¬ p is logical not, true when p is false, false when q is true
          
      x = y is the identity relationship, with ≠ its negation
       
      x ¶ y read as x precedes y, an ordering relationship that applies 
            over Ob

   Although these can be seen as rules for computation, Ot is a deductive
   theory.  E.g., if it is asserted that p ⇔ q and also ¬ p, deduction
   that ¬ q is true is a logical inference; if it is asserted that p ⇒ q
   and also p, deduction that q is true is a logical inference.  The law
   of excluded middle holds.  It is the case that ¬(p ∧ ¬p) and also
    ¬(¬p) ⇔ p and (p ⇒ q) ⇔ (¬p ∨ q).

PRIMITIVE NOTIONS

   Functions ob.a, ob.b, ob.c, ob.e and allied relations are taken
   as given and complete.
   
   Ob1. Pairs
        z = ob.c(x,y) ⇒ ob.a(z) = x ∧ ob.b(z) = y
        z = ob.c(ob.a(z),ob.b(z)) ⇔ ob.a(z) ≠ z ∧ ob.b(z) ≠ z
       
   Ob2. Enclosures
        z = ob.e(x) ⇒ ob.a(z) = x ∧ ob.b(z) = z
        z = ob.e(ob.a(z)) ⇔ ob.a(z) ≠ z ∧ ob.b(z) = z
       
   Ob3. Individuals
        ob.is-individual(z) ⇔ ob.a(z) = z ∧ ob.b(z) = z
       
   Ob4. Structural Discrimination Predicates
        ob.is-singleton(z) ⇔ ob.b(z) = z.
        ob.is-pair(z) ⇔ ¬ ob.is-singleton(z)
        ob.is-enclosure(z) ⇔ ob.is-singleton(z) ∧ ob.a(z) ≠ z
        
   Ob5. Totality
        ob.is-individual(z) ∨ ob.is-enclosure(z) ∨ ob.is-pair(z)
        
        It is a consequence that each ob is exactly one of pair, 
        enclosure, and individual and there are no others.
          (ob.is-individual(z) ∧ ¬ ob.is-enclosure(z) ∧ ¬ ob.is-pair(z))
        ∨ (ob.is-enclosure(z) ∧ ¬ ob.is-individual(z) ∧ ¬ ob.is-pair(z))
        ∨ (ob.is-pair(z) ∧ ¬ ob.is-enclosure(z) ∧ ¬ ob.is-individual(z))
      
   Ob6. Structural Identity
        u = ob.c(v,w) ∧ z = ob.c(x,y) 
                   ⇒ (u = z ⇔ v = x ∧ w = y)                  (a)
        
        u = ob.e(v) ∧ z = ob.e(x) 
                   ⇒ (u = z ⇔ v = x)                           (b)
        
        ob.is-pair(u) ^ ob.is-singleton(z)
                   ⇒ u ≠ z                                     (c)
                   
        ob.is-individual(u) ^ ob.a(z) ≠ z
                   ⇒ u ≠ z                                     (d)
                   
   Ob7. Identity Among Primitive Individuals
        ob.is-individual(ob.NIL)
        
        There are a limited number of fixed-name primitive individuals.  
        They can be taken as given.  They are not definable in terms of 
        others.
        
        Individuals identified by upper-case namings, such as ob.NIL,
        are distinct if and only if their names differ.  Those 
        individuals are also distinct from any other individual
        kind that may arise. 
                 
   Ob8. The ¶ Precedence Condition
   
        ¬ (x ¶ x)                                (a), irreflexive
        (x ¶ y) ⇒ ¬ (y ¶ x)                      (b), non-commutative
        (x ¶ y) ∧ (y ¶ z) ⇒ (x ¶ z)             (c), transitive
        
        x = y ⇔ ¬ (x ¶ y) ∧ ¬ (y ¶ x)           (d), ordering
        
        z = ob.e(y) ⇔ (y ¶ z)                    (e), construction
        z = ob.c(x,y) ⇔ (x ¶ z) ∧ (y ¶ z)
        
        ob.is-individual(x) ⇒ x ¶ ob.e(x)         (f), floating     
        ob.is-individual(x) ⇒ x ¶ ob.c(x,y)      
        ob.is-individual(x) ⇒ x ¶ ob.c(y,x)
     
   Ob9. Denumerability
        Ob consists of all distinct, finitely-expressible obs satisfying
        conditions Ob1-Ob8 and having no occurrences of ob.a and ob.b
        in their formulation.  The individuals are denumerable.
        
        Ob is unbounded and denumerable provided that the individuals be 
        denumerable.

   
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                       Copyright 2017 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 
TODO

 * Provide a stable location for obtheory version progressions on 
   <http://miser-theory.info>.
   
 * Confirm that the notation characters are preserved/presented on the
   different storage media.
   
 * Figure out what to do about well-definedness.  Is this an Ob10 condition?
 
 * Find places to locate this material that is perhaps easier to reach
   into than GitHub, and perhaps more durable.  This may depend on stability
   of the material.
   
 * Introduction of the oMiser universal eval-/apply-functions requires 
   identification of additional individuals.  Technically, they should be
   introduced with those functions.  We want that to work in a way that
   is not very clumsy but does spiral upward.  Having the universal function
   definitely impacts the computational manifestation of ‹ob›, as does 
   integration of a manifestation with oFrugal or other "peripheral processor."
   
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 0.0.16 2017-09-06-18:02 Correct the GitHub link and add work items about
        further steps.
 0.0.15 2017-09-05-18:11 Make ob.NIL an individual explicitly and simplify
        Ob7 somewhat.
 0.0.14 2017-09-03-09:38 Make the Ob5 Totality partitioning consequence
        formally-explicit.
 0.0.13 2017-08-28-08:56 Touch-up and add TODO about well-definedness
 0.0.12 2017-08-27-11:43 Wordsmithing and assertion of classical conditions.
 0.0.11 2017-08-26-09:56 Smooth the description of the logical notation and
        distinguish it from similar-appearing computational operations
 0.0.10 2017-08-24-10:17 Adapted from the SML mockup obtest.sml 0.0.9 for
        reference in all mockups and the expanded development for oMiser.


                          *** end of obtheory.txt ***                               
   