boole.txt 0.0.4                      UTF-8                       dh:2018-11-20
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|--*

                           The Miser Project Code
                           ======================

        <https://github.com/orcmid/miser/blob/master/oMiser/boole.txt>


     INTERPRETATION OF BOOLEAN ALGEBRAS IN THE ‹ob› MODEL OF COMPUTATION
     -------------------------------------------------------------------

        Boolean Algebras have rich application in connection with digital
        computation.

        For oMiser, enough Boolean Algebra theory is presented to illuminate
        important representation and interpretation features of other
        mathematical structures in ‹ob›.  Interpretations in ‹ob› will
        thereby have representation-preserving computational interpretations
        that are directly available in the ‹ob› computational model.

                              CONTENT

              1. MATHEMATICAL STRUCTURES
                 Abstract theories of Boolean Algebras in the manner of
                 obtheory although at a different level of abstraction

                 1.1 Notation and Basic Operations
                 1.2 Basic Constraints
                 1.3 Additional Characteristics
                 1.4 Interpretations

              2. ‹bp› REPRESENTATION

                 2.1 Unique Representation
                 2.2 Notable Qualities
                 2.3 ‹bp› Interpretation in ‹ob›
                 2.4 Interpretation Distinction and Domain Restrictions

              3. ‹bp› REPRESENTATION
                 [tbd]

              4. NOTES AND REFERENCES
                 Sources of further details and theoretical work concerning
                 Boolean Algebras and computational matters

 1. MATHEMATICAL STRUCTURES

    Two mathematical structures are introduced.

    ‹ba› = 〈Ba,Baf,Bat〉
    ‹bp› = 〈Bp,Bpf,Bpt〉

    The logical theories Bpt and Bat are applications of First Order Logic
    with = (FOL=) with the notation introduced in Section 1 of obtheory.txt,
    <https://github.com/orcmid/miser/blob/master/oMiser/obtheory.txt>.

 1.1 Notation and Basic Operations

    The ‹bp› domain of discourse, Bp, consists of exactly two distinguished
    entities.

       ⊤ (nickname "top")
       ⊥ (nickname "bot")

    The ‹ba› domain of discourse, Ba, is a finite set having at least two
    distinct members, two of which are distinguished as ⊤ and ⊥, respectively.

    The additional basic notions consist of a small number of functions
    typically expressed as operations.

        ~ x  "comp" x, signifies the complement of x

      x ∩ y  x "cap" y also known as the meet of x and y

      x ∪ y  x "cup" y also known as the join of x and y

      x ∸ y  x "sep" y is x ∪ y excluding x ∩ y, also known as the symmetric
             difference, that which is separate between x and y, if anything.

    In addition to equality, there is also an ordering relation,

      x ⊆ y  x "sub" y, comparable to the subset relation among sets.

    To simplify expressions and reduce parentheses, the above listing is
    taken as an order of precedence, from strongest to weakest.  That is

        x ∩ ~ y ∪ ~ x ∩ y = (x ∩ (~ y) ∪ ((~ x) ∩ y)

 1.2 Basic Constraints

    The basic conditions on all ‹ba› structures are presented in terms of
    axioms, arrangements that hold whatever the domain of discourse, Ba,
    happens to be and however the operations are defined in satisfaction
    of these constraints.

    Ba1. Commutativity
         x ∪ y = y ∪ x
         x ∩ y = y ∩ x

    Ba2. Identity
         x ∪ ⊥ = x
         x ∩ ⊤ = x

    Ba3. Distributivity
         x ∪ (y ∩ z) = (x ∪ y) ∩ (x ∪ z)
         x ∩ (y ∪ z) = (x ∩ y) ∪ (x ∩ z)

    Ba4. Complements
         x ∪ ~ x = ⊤
         x ∩ ~ x = ⊥

    Ba5. Subordination
         x ⊆ y ⇔ x = x ∩ y

 1.3 Additional Characteristics

    The following are consequences of the basic constraints.  They are
    applicable to any Boolean Algebra structure ‹ba› with distinguished
    domain Ba and definite basic operations satisfying Ba1-Ba5.

    Ba6. Associativity
         x ∪ (y ∪ z) = (x ∪ y) ∪ z
         x ∩ (y ∩ z) = (x ∩ y) ∩ z

    Ba7. Absorption
         x ∪ (x ∩ y) = x
         x ∩ (x ∪ y) = x

    Ba8. Unique Complement Pairs
         x = ~ ~ x
         x ≠ ~ x

    Ba9. Separation (definition)
         x ∸ y = x ∩ ~ y ∪ ~ x ∩ y

    Ba10. Well-Ordering
         ⊥ ⊆ y (hence "bot")
         x ⊆ ⊤ (hence "top")

    Ba11. The number of members in the domain of discourse Ba is even and a
         power of 2.

 1.4 Interpretations

    The structures, ‹ba› and the special case ‹bp› are highly abstract.
    The only requirement for representing any ‹ba› is to distinguish the
    (finitely) enumerable members of the domain of discourse in some manner;
    then represent the basic functions such that all of the basic conditions
    are satisfied.


 2. ‹bp› REPRESENTATION

 2.1 Unique Representation

    Given definite Bp = {⊥, ⊤}, the basic constraints are uniquelly satisfied
    by the functions represented as bp.comp, bp.meet, bp.join, etc.

    bp.comp(⊥) = ⊤
    bp.comp(⊤) = ⊥

    bp.meet(⊤, x) = x
    bp.meet(⊥, x) = ⊥

    bp.join(⊤, x) = ⊤
    bp.join(⊥, x) = x

    bp.sep(⊤, x) = bp.comp(x)
    bp.sep(⊥, x) = x

    bp.sub(⊤, ⊤)
    bp.sub(⊥, x)

 2.2 Notable Qualities

     * Verification of a computational interpretation of Ba1-Ba10 by
       exhaustive testing is feasible.

     * All computable functions, bp.f(x1, x2, ..., xn) in Bpf are
       representable via Bpt using only bp.comp, bp.meet, and bp.join
       operations.

     * Propositions of the form bp.f(x1, x2, ..., xn) = ⊤ correspond to
       propositional logic assertions s(p1, p2, ..., pn) by rewriting the
       representation of bp.f such that ~ x becomes ¬ p, x ∩ y becomes p ∧ q,
       x ∪ y becomes p ∨ q, and x ∸ y becomes ¬ (p ⇔ q), the latter also
       known as exclusive-or.

     * The form bp.f(x1, x2, .., xn) is satisfiable if there is an assignment
       of {⊥, ⊤} values to the xi such that bp.f(x1, x2, .., xn) = ⊤.  The
       determination of satisfiability from the representation of bp.f can
       grow exponentially in the worst case as the number of variables
       increases.  That the worst case cannot be improved figures in an
       important conjecture (P ≠ NP) concerning computational complexity.

 2.3 ‹bp› Interpretation in ‹ob›

    A straightforward interpretation of ‹bp› in ‹ob› is by choosing any two
    distinct obs as ⊥ and ⊤ and matching representation of the unique ‹bp›
    functions with functions having corresponding representations in ‹ob›.

           ‹bp› notion (in Bpt)          ‹ob› interpretation (in Ot)

              ⊥                            ob.NIL
              ⊤                            ob.e(ob.NIL)
              bp.comp(x)                   ob.bpENcomp(x)
              bp.meet(x, y)                ob.bpENmeet(x, y)
              bp.join(x, y)                ob.bpENjoin(x, y)
              bp.sep(x, y)                 ob.bpENsep(x, y)
              bp.sub(x, y)                 ob.is-bpENsub(x, y)
              =                            =

    The ‹ob› representations of functions offered as interpretations of the
    ‹bp› unique representations is simply the rewriting of the ‹bp›
    representations in Ot with substitution of the interpretation for ⊥ and ⊤
    everywhere.

 2.4 Interpretation Distinction and Domain Restrictions

    The complicated namings, such as ob.bpENcomp, are to reflect the specific
    dependence on ob.e(ob.NIL) and ob.NIL.  This points out that there are
    any number of different interpretations of ‹bp› in ‹ob› and they may serve
    additional math-irrelevant purposes.

    Whereas the ‹bp› domain of discourse has exactly two mathematical
    entities, that is not the case for ‹ob›.  Carrying over the Of function
    representations of ‹bp› to corresponding representations in ‹ob› leads
    to partial functions in Of.  That is no problem so long as the operands
    are confined to the interpretations of ⊥ and ⊤.

    Alternatively, consider ob.bpIcomp(x), ..., ob.is-bpIsub(x, y) with these
    representations:

         ob.is-individual(x) ⇒ ob.bpIcomp(x) = ob.e(ob.NIL)
       ¬ ob.is-individual(x) ⇒ ob.bpIcomp(x) = ob.NIL

         ob.is-individual(x) ⇒ ob.bpImeet(x, y) = x
       ¬ ob.is-individual(x) ⇒ ob.bpImeet(x, y) = y

         ob.is-individual(x) ⇒ ob.bpIjoin(x, y) = y
       ¬ ob.is-individual(x) ⇒ ob.bpIjoin(x, y) = x

         ob.is-individual(x) ⇒ ob.bpIsep(x, y) = y
       ¬ ob.is-individual(x) ⇒ ob.bpIsep(x, y) = ob.bpIcomp(y)

         ob.is-individual(x) ⇒ ob.bpIsub(x, y)
       ¬ ob.is-individual(x) ⇒ ob.bpIsub(y, x)

    These representations have the interesting quality that any individual is
    an interpretation of ⊥ and any non-individual is an interpretation of ⊤.
    In this case we can consider ob.NIL to be the canonical form for ⊥ and
    ob.e(ob.NIL) can serve as the canonical form for ⊤.  The canonical form of
    an ob x in this representation is uniquelly determined by

         ob.bpIcf(x) = ob.pbIcomp(ob.pbIcomp( x ))

    Again, when the operands are restricted to be the canonical forms in these
    function representations, the restriction is a faithful interpretation of
    structure ‹bp› in structure ‹ob›.

    IMPORTANT: The "=" of ‹bp› is interpreted by the "=" of ‹ob› only when
    the domain of representation is restricted to exactly the (canonical-form)
    interpretations of ⊥ and ⊤.  Alternatively, we can interpret the x = y of
    ‹bp› as ob.bpIcf(x) = ob.bpIcf(y) in this last example of interpretation
    in ‹ob›.

    After [Forster2003], we classify an interpretation where "=" carries over
    to be an implementation.  When "=" does not carry over directly, the
    interpretation is known as a simulation.


 3. ‹ba› REPRESENTATION
    [tbd]


 4. NOTES AND REFERENCES

    Limitation of ‹ba› to a domain of discourse having at least two members
    and being finite is appropriate for consideration of computational
    interpretations under oMiser.  Although there are Boolean Algebras having
    unbounded domains, that is not considered here.

    Formulation of ‹ba› is an amalgam of the various treatments cited below.
    Symbols ⊤ and ⊥ are are chosen to avoid the common use of 1 and 0 and
    confusion with interpretation as numbers and binary bits, despite the
    historical roots in [Boole1834] and the practical application to binary
    representations in digital computing [Knuth2011].

    Likewise, the symbols for Boolean operations are kept distinct from the
    logical connectives used throughout oMiser in FOL= notation, hence the
    use of complement, meet, join, and sep symbols.  Notation separation
    facilitates recognition of correspondences without suggestion of identity.

    [Boole1854]
        Boole, George.  An Investigation of the Laws of Thought: on which
        are founded the mathematical theories of logic and probabilities.
        Dover (New York: 1958), original 1854 edition reprinted with all
        corrections made within the text.  ISBN 0-486-60028-9

    [EncycMath2012]
        Boolean algebra.  2012-04-04 article accessed on the Internet at
        <https://www.encyclopediaofmath.org/index.php?title=Boolean_algebra&oldid=24193>.

    [Forster2003]
        Forster, Thomas.  Reasoning About Theoretical Entities.  World
        Scientific (New Jersey: 2003). ISBN 981-238-567-3

    [Knuth2011]
        Knuth, Donald E.  Zeros and Ones.  Section 7.1, pp. 47-280 in The Art
        of Computer Programming, Volume 4A: Combinatorial Algorithms, Part 1.
        Addison-Wesley (Upper Saddle River, NJ: 2011). ISBN 978-0-201-03804-0

    [Rosenbloom1950]
        Rosenbloom, Paul C. The Logic of Classes.  Chapter 1, pp. 1-27 in The
        Elements of Mathematical Logic.  Dover (New York: 1950).  ISBN
        0-486-60227-3 pbk.

    [Stoll1979]
        Stoll, Robert R.  Boolean Algebra.  Chapter 6, pp. 248-288 in Set
        Theory and Logic.  Dover (New York: 1979).  ISBN 0-486-63829-4

    [Wikipedia2018a]
        Boolean algebra.  2018-11-04 article accessed on the Internet at
        <https://en.wikipedia.org/w/index.php?title=Boolean_algebra&oldid=867188281>.

    [Wikipedia2018b]
        Boolean algebra (structure).  2018-11-06 article accessed on the
        Internet at <https://en.wikipedia.org/w/index.php?title=Boolean_algebra_(structure)&oldid=867568743>.


 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

                   Copyright 2018 Dennis E. Hamilton

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 TODO:

  * Interpret ‹bp› in ‹ob›.  Characterize as an implementation.

  * Deal with the partiality of ‹bp› interpretation and the restriction.
    Also the arbitrariness of the interpretations of ⊤ ⊥.

  * Establish ‹ba› and see what we need to differ with respect to ‹bp›.

  * Interpret ‹bp› as a restriction of ‹ba›.

  * Well-ordering will be important (?)

  * We will distinguish Interpretation of one structure in another and how
    the interpretation can be an implementation or a simulation.  (terms
    from Forster)

  * Be consistent in the use of qualified names for entities, such that the
    structural context is explicit.

  * At some point, we need to deal with labeling of entities, sequences,
    and class membership.

 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 0.0.4 2018-11-20-14:55 Manage TODOs. Complete section 2.  Wordsmith.
 0.0.3 2018-11-19-11:49 Refine in preparation for ‹bp› Interpretation in ‹ob›.
 0.0.2 2018-11-18-12:14 Expand and refine coverage to ‹bp› representation.
 0.0.1 2018-11-15-14:38 Manage TODOs. Replace ⨁ with ∸ for symmetric
       difference.  Draft essentials of structures ‹ba› and ‹bp›.  Add initial
       references.
 0.0.0 2018-11-13-10:38 Placeholder and boiler plate for bridging between
       Boolean Algebras and computational interpretations in ‹ob›.

                       *** end of boole.txt ***
